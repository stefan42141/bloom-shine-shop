const Product = require('../models/Product');

// ========== –ü–û–õ–£–ß–ò–¢–¨ –†–ï–ö–û–ú–ï–ù–î–£–ï–ú–´–ï –ë–û–ö–°–´ –î–õ–Ø –ì–õ–ê–í–ù–û–ô –°–¢–†–ê–ù–ò–¶–´ ==========
exports.getFeaturedProducts = async (req, res) => {
  try {
    console.log('üåü –ó–∞–ø—Ä–æ—Å —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã—Ö –±–æ–∫—Å–æ–≤ –¥–ª—è –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã...');
    
    // –ü–æ–ª—É—á–∞–µ–º 5 featured –±–æ–∫—Å–æ–≤
    const featuredBoxes = await Product.getFeatured(5);
    
    if (!featuredBoxes || featuredBoxes.length === 0) {
      console.log('‚ö†Ô∏è –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –±–æ–∫—Å—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
      return res.status(200).json({
        success: true,
        message: '–ù–µ–º–∞—î —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–∏—Ö –∞—Ä–æ–º–∞—Ç–∏—á–Ω–∏—Ö –±–æ–∫—Å—ñ–≤',
        products: [],
        count: 0
      });
    }

    console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${featuredBoxes.length} —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã—Ö –±–æ–∫—Å–æ–≤`);
    
    // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è frontend
    const formattedBoxes = featuredBoxes.map(box => ({
      _id: box._id,
      name: box.name,
      category: box.category,
      shortDescription: box.shortDescription,
      price: box.price,
      oldPrice: box.oldPrice,
      discount: box.discount,
      images: {
        main: box.images.main,
        thumbnail: box.images.thumbnail || box.images.main
      },
      rating: box.rating.average,
      reviewsCount: box.reviewsCount,
      badge: box.badge,
      luxury: box.luxury,
      featured: box.featured,
      inStock: box.inStock,
      // –°–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –ø–æ–ª—è –¥–ª—è –∞—Ä–æ–º–∞–±–æ–∫—Å–æ–≤
      aromaticProfile: box.specifications?.aromaticProfile,
      mood: box.specifications?.mood,
      ingredients: box.specifications?.composition
    }));

    res.status(200).json({
      success: true,
      count: formattedBoxes.length,
      products: formattedBoxes
    });

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã—Ö –±–æ–∫—Å–æ–≤:', error.message);
    res.status(500).json({
      success: false,
      message: '–ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–∏—Ö –±–æ–∫—Å—ñ–≤',
      error: process.env.NODE_ENV === 'development' ? error.message : undefined
    });
  }
};

// ========== –ü–û–õ–£–ß–ò–¢–¨ –í–°–ï –ë–û–ö–°–´ –° –§–ò–õ–¨–¢–†–ê–¶–ò–ï–ô ==========
exports.getAllProducts = async (req, res) => {
  try {
    const {
      page = 1,
      limit = 12,
      category,
      minPrice,
      maxPrice,
      sortBy = 'createdAt',
      sortOrder = 'desc',
      search,
      luxury,
      inStock,
      aromaticFamily // –ù–æ–≤—ã–π —Ñ–∏–ª—å—Ç—Ä –¥–ª—è –∞—Ä–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Å–µ–º–µ–π
    } = req.query;

    console.log('üìã –ó–∞–ø—Ä–æ—Å –≤—Å–µ—Ö –±–æ–∫—Å–æ–≤ —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏:', req.query);

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ñ–∏–ª—å—Ç—Ä–æ–≤
    const filters = {};
    
    if (category && category !== 'all') {
      filters.category = category;
    }
    
    if (minPrice || maxPrice) {
      filters.minPrice = minPrice ? Number(minPrice) : undefined;
      filters.maxPrice = maxPrice ? Number(maxPrice) : undefined;
    }
    
    if (luxury !== undefined) {
      filters.luxury = luxury === 'true';
    }
    
    if (inStock !== undefined) {
      filters.inStock = inStock === 'true';
    }

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
    const sortOptions = {};
    sortOptions[sortBy] = sortOrder === 'asc' ? 1 : -1;

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    const skip = (Number(page) - 1) * Number(limit);
    const options = {
      sort: sortOptions,
      skip,
      limit: Number(limit)
    };

    let products;
    
    // –ü–æ–∏—Å–∫ –∏–ª–∏ –æ–±—ã—á–Ω—ã–π –∑–∞–ø—Ä–æ—Å
    if (search && search.trim()) {
      products = await Product.search(search.trim());
      // –ü—Ä–∏–º–µ–Ω—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã –∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º –ø–æ–∏—Å–∫–∞
      if (filters.category) {
        products = products.filter(p => p.category === filters.category);
      }
      if (filters.luxury !== undefined) {
        products = products.filter(p => p.luxury === filters.luxury);
      }
      // –†—É—á–Ω–∞—è –ø–∞–≥–∏–Ω–∞—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞
      products = products.slice(skip, skip + Number(limit));
    } else {
      products = await Product.getAll(filters, options);
    }

    // –ü–æ–ª—É—á–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    const totalProducts = await Product.getAll(filters);
    const totalPages = Math.ceil(totalProducts.length / Number(limit));

    console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${products.length} –±–æ–∫—Å–æ–≤ –∏–∑ ${totalProducts.length}`);

    res.status(200).json({
      success: true,
      products,
      pagination: {
        currentPage: Number(page),
        totalPages,
        totalProducts: totalProducts.length,
        hasNext: Number(page) < totalPages,
        hasPrev: Number(page) > 1,
        limit: Number(limit)
      },
      filters: {
        category,
        minPrice: Number(minPrice) || 0,
        maxPrice: Number(maxPrice) || 999999,
        luxury,
        inStock
      }
    });

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–æ–∫—Å–æ–≤:', error.message);
    res.status(500).json({
      success: false,
      message: '–ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –±–æ–∫—Å—ñ–≤'
    });
  }
};

// ========== –ü–û–õ–£–ß–ò–¢–¨ –ë–û–ö–° –ü–û ID ==========
exports.getProductById = async (req, res) => {
  try {
    const { id } = req.params;
    console.log(`üîç –ó–∞–ø—Ä–æ—Å –±–æ–∫—Å–∞ –ø–æ ID: ${id}`);

    const product = await Product.getById(id);

    if (!product) {
      return res.status(404).json({
        success: false,
        message: '–ê—Ä–æ–º–∞—Ç–∏—á–Ω–∏–π –±–æ–∫—Å –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ'
      });
    }

    console.log(`‚úÖ –ù–∞–π–¥–µ–Ω –±–æ–∫—Å: ${product.name}`);

    res.status(200).json({
      success: true,
      product
    });

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–æ–∫—Å–∞:', error.message);
    res.status(500).json({
      success: false,
      message: '–ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –±–æ–∫—Å–∞'
    });
  }
};

// ========== –ü–û–õ–£–ß–ò–¢–¨ –ü–û–•–û–ñ–ò–ï –ë–û–ö–°–´ ==========
exports.getSimilarProducts = async (req, res) => {
  try {
    const { id } = req.params;
    const { limit = 4 } = req.query;

    console.log(`üîÑ –ó–∞–ø—Ä–æ—Å –ø–æ—Ö–æ–∂–∏—Ö –±–æ–∫—Å–æ–≤ –¥–ª—è ID: ${id}`);

    const similarProducts = await Product.getSimilar(id, Number(limit));

    res.status(200).json({
      success: true,
      products: similarProducts,
      count: similarProducts.length
    });

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ—Ö–æ–∂–∏—Ö –±–æ–∫—Å–æ–≤:', error.message);
    res.status(500).json({
      success: false,
      message: '–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ö–æ–∂–∏—Ö –±–æ–∫—Å—ñ–≤'
    });
  }
};

// ========== –ü–û–ò–°–ö –ë–û–ö–°–û–í ==========
exports.searchProducts = async (req, res) => {
  try {
    const { q: searchTerm } = req.query;

    if (!searchTerm || searchTerm.trim().length < 2) {
      return res.status(400).json({
        success: false,
        message: '–ü–æ—à—É–∫–æ–≤–∏–π –∑–∞–ø–∏—Ç –ø–æ–≤–∏–Ω–µ–Ω –º—ñ—Å—Ç–∏—Ç–∏ –º—ñ–Ω—ñ–º—É–º 2 —Å–∏–º–≤–æ–ª–∏'
      });
    }

    console.log(`üîç –ü–æ–∏—Å–∫ –±–æ–∫—Å–æ–≤: "${searchTerm}"`);

    const searchResults = await Product.search(searchTerm.trim());

    res.status(200).json({
      success: true,
      products: searchResults,
      count: searchResults.length,
      searchTerm: searchTerm.trim()
    });

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –±–æ–∫—Å–æ–≤:', error.message);
    res.status(500).json({
      success: false,
      message: '–ü–æ–º–∏–ª–∫–∞ –ø–æ—à—É–∫—É –±–æ–∫—Å—ñ–≤'
    });
  }
};

// ========== –ü–û–õ–£–ß–ò–¢–¨ –ë–û–ö–°–´ –ü–û –ö–ê–¢–ï–ì–û–†–ò–ò ==========
exports.getProductsByCategory = async (req, res) => {
  try {
    const { category } = req.params;
    const { limit = 12 } = req.query;

    console.log(`üì¶ –ó–∞–ø—Ä–æ—Å –±–æ–∫—Å–æ–≤ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: ${category}`);

    const products = await Product.getByCategory(category, Number(limit));

    res.status(200).json({
      success: true,
      products,
      count: products.length,
      category
    });

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–æ–∫—Å–æ–≤ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:', error.message);
    res.status(500).json({
      success: false,
      message: '–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –±–æ–∫—Å—ñ–≤ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó'
    });
  }
};

// ========== –û–ë–ù–û–í–ò–¢–¨ –†–ï–ô–¢–ò–ù–ì –ë–û–ö–°–ê ==========
exports.updateProductRating = async (req, res) => {
  try {
    const { id } = req.params;
    const { rating } = req.body;

    if (!rating || rating < 1 || rating > 5) {
      return res.status(400).json({
        success: false,
        message: '–†–µ–π—Ç–∏–Ω–≥ –ø–æ–≤–∏–Ω–µ–Ω –±—É—Ç–∏ –≤—ñ–¥ 1 –¥–æ 5'
      });
    }

    console.log(`‚≠ê –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–µ–π—Ç–∏–Ω–≥–∞ –±–æ–∫—Å–∞ ${id}: ${rating}`);

    const updatedProduct = await Product.updateRating(id, Number(rating));

    if (!updatedProduct) {
      return res.status(404).json({
        success: false,
        message: '–ë–æ–∫—Å –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ'
      });
    }

    res.status(200).json({
      success: true,
      message: '–†–µ–π—Ç–∏–Ω–≥ –æ–Ω–æ–≤–ª–µ–Ω–æ',
      rating: updatedProduct.rating
    });

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–µ–π—Ç–∏–Ω–≥–∞:', error.message);
    res.status(500).json({
      success: false,
      message: '–ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Ä–µ–π—Ç–∏–Ω–≥—É'
    });
  }
};

// ========== –ü–û–õ–£–ß–ò–¢–¨ –°–¢–ê–¢–ò–°–¢–ò–ö–£ –ë–û–ö–°–û–í ==========
exports.getProductsStats = async (req, res) => {
  try {
    console.log('üìä –ó–∞–ø—Ä–æ—Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –±–æ–∫—Å–æ–≤');

    const stats = await Product.getStats();

    res.status(200).json({
      success: true,
      stats
    });

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error.message);
    res.status(500).json({
      success: false,
      message: '–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏'
    });
  }
};

// ========== –ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–ò–í–ù–´–ï –§–£–ù–ö–¶–ò–ò ==========

// –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –±–æ–∫—Å (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
exports.createProduct = async (req, res) => {
  try {
    console.log('‚ûï –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∞—Ä–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –±–æ–∫—Å–∞');

    const newProduct = await Product.create(req.body);

    console.log(`‚úÖ –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –±–æ–∫—Å: ${newProduct.name}`);

    res.status(201).json({
      success: true,
      message: '–ê—Ä–æ–º–∞—Ç–∏—á–Ω–∏–π –±–æ–∫—Å —Å—Ç–≤–æ—Ä–µ–Ω–æ',
      product: newProduct
    });

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±–æ–∫—Å–∞:', error.message);
    res.status(400).json({
      success: false,
      message: error.message
    });
  }
};

// –û–±–Ω–æ–≤–∏—Ç—å –±–æ–∫—Å (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
exports.updateProduct = async (req, res) => {
  try {
    const { id } = req.params;
    console.log(`‚úèÔ∏è –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–æ–∫—Å–∞ ID: ${id}`);

    const sanitizedData = Product.sanitizeUpdateData(req.body);
    const updatedProduct = await Product.update(id, sanitizedData);

    if (!updatedProduct) {
      return res.status(404).json({
        success: false,
        message: '–ë–æ–∫—Å –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ'
      });
    }

    console.log(`‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω –±–æ–∫—Å: ${updatedProduct.name}`);

    res.status(200).json({
      success: true,
      message: '–ë–æ–∫—Å –æ–Ω–æ–≤–ª–µ–Ω–æ',
      product: updatedProduct
    });

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–æ–∫—Å–∞:', error.message);
    res.status(400).json({
      success: false,
      message: error.message
    });
  }
};

// –£–¥–∞–ª–∏—Ç—å –±–æ–∫—Å (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
exports.deleteProduct = async (req, res) => {
  try {
    const { id } = req.params;
    console.log(`üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ –±–æ–∫—Å–∞ ID: ${id}`);

    const deletedProduct = await Product.delete(id);

    if (!deletedProduct) {
      return res.status(404).json({
        success: false,
        message: '–ë–æ–∫—Å –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ'
      });
    }

    console.log(`‚úÖ –£–¥–∞–ª–µ–Ω –±–æ–∫—Å: ${deletedProduct.name}`);

    res.status(200).json({
      success: true,
      message: '–ë–æ–∫—Å –≤–∏–¥–∞–ª–µ–Ω–æ'
    });

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –±–æ–∫—Å–∞:', error.message);
    res.status(500).json({
      success: false,
      message: '–ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è –±–æ–∫—Å–∞'
    });
  }
};