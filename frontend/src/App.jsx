import React, { useState, useEffect } from 'react';
import { BrowserRouter as Router, Routes, Route } from 'react-router-dom';

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
import Header from './components/Header';
import Footer from './components/Footer';
import Cart from './components/Cart';
import Auth from './components/Auth';

// –°—Ç—Ä–∞–Ω–∏—Ü—ã
import Home from './pages/Home';
import Catalog from './pages/Catalog';
import Product from './pages/Product';
import CartPage from './pages/Cart';
import Checkout from './pages/Checkout';

import './styles/variables.css';    // 1. –°–Ω–∞—á–∞–ª–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
import './styles/globals.css';      // 2. –ü–æ—Ç–æ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–µ —Å—Ç–∏–ª–∏

const App = () => {
  // –°–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
  const [cartItems, setCartItems] = useState([]);
  const [isCartOpen, setIsCartOpen] = useState(false);
  const [isAuthOpen, setIsAuthOpen] = useState(false);
  const [user, setUser] = useState(null);
  const [isLoading, setIsLoading] = useState(true);

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
  useEffect(() => {
    initializeApp();
  }, []);

  // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ—Ä–∑–∏–Ω—ã –≤ localStorage –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏
  useEffect(() => {
    if (cartItems.length > 0) {
      localStorage.setItem('bloomshine-cart', JSON.stringify(cartItems));
    }
  }, [cartItems]);

  const initializeApp = () => {
    try {
      // –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É –∏–∑ localStorage
      const savedCart = localStorage.getItem('bloomshine-cart');
      if (savedCart) {
        setCartItems(JSON.parse(savedCart));
      }

      // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const savedUser = localStorage.getItem('bloomshine-user');
      if (savedUser) {
        setUser(JSON.parse(savedUser));
      }
    } catch (error) {
      console.error('–ü–æ–º–∏–ª–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó –¥–æ–¥–∞—Ç–∫—É:', error);
    } finally {
      setIsLoading(false);
    }
  };

  // ========== –§–£–ù–ö–¶–ò–ò –ö–û–†–ó–ò–ù–´ ==========
  const addToCart = (product) => {
    const existingItemIndex = cartItems.findIndex(
      item => item.id === product.id && 
               item.selectedSize === product.selectedSize
    );

    if (existingItemIndex !== -1) {
      // –¢–æ–≤–∞—Ä —É–∂–µ –µ—Å—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω–µ - —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
      const updatedItems = [...cartItems];
      updatedItems[existingItemIndex].quantity += product.quantity || 1;
      setCartItems(updatedItems);
    } else {
      // –ù–æ–≤—ã–π —Ç–æ–≤–∞—Ä - –¥–æ–±–∞–≤–ª—è–µ–º –≤ –∫–æ—Ä–∑–∏–Ω—É
      const cartItem = {
        ...product,
        quantity: product.quantity || 1,
        addedAt: new Date().toISOString()
      };
      setCartItems([...cartItems, cartItem]);
    }

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    showNotification(`${product.name} –¥–æ–¥–∞–Ω–æ –¥–æ –∫–æ—à–∏–∫–∞!`, 'success');
  };

  const updateCartQuantity = (itemId, newQuantity) => {
    if (newQuantity <= 0) {
      removeFromCart(itemId);
      return;
    }

    const updatedItems = cartItems.map(item =>
      item.id === itemId 
        ? { ...item, quantity: newQuantity }
        : item
    );
    setCartItems(updatedItems);
  };

  const removeFromCart = (itemId) => {
    const updatedItems = cartItems.filter(item => item.id !== itemId);
    setCartItems(updatedItems);
    showNotification('–¢–æ–≤–∞—Ä –≤–∏–¥–∞–ª–µ–Ω–æ –∑ –∫–æ—à–∏–∫–∞', 'info');
  };

  const clearCart = () => {
    setCartItems([]);
    localStorage.removeItem('bloomshine-cart');
    showNotification('–ö–æ—à–∏–∫ –æ—á–∏—â–µ–Ω–æ', 'info');
  };

  const getCartItemsCount = () => {
    return cartItems.reduce((total, item) => total + item.quantity, 0);
  };

  // ========== –§–£–ù–ö–¶–ò–ò –ê–í–¢–û–†–ò–ó–ê–¶–ò–ò ==========
  const handleLogin = async (credentials) => {
    try {
      setIsLoading(true);
      // TODO: –ó–∞–º–µ–Ω–∏—Ç—å –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π API –∑–∞–ø—Ä–æ—Å
      await new Promise(resolve => setTimeout(resolve, 1000));
      
      const userData = {
        id: Date.now(),
        email: credentials.email,
        firstName: '–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á',
        lastName: 'BloomShine',
        isAuthenticated: true,
        loginAt: new Date().toISOString()
      };
      
      setUser(userData);
      localStorage.setItem('bloomshine-user', JSON.stringify(userData));
      showNotification(`–í—ñ—Ç–∞—î–º–æ, ${userData.firstName}!`, 'success');
    } catch (error) {
      throw new Error('–ü–æ–º–∏–ª–∫–∞ –≤—Ö–æ–¥—É –≤ —Å–∏—Å—Ç–µ–º—É');
    } finally {
      setIsLoading(false);
    }
  };

  const handleRegister = async (userData) => {
    try {
      setIsLoading(true);
      // TODO: –ó–∞–º–µ–Ω–∏—Ç—å –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π API –∑–∞–ø—Ä–æ—Å
      await new Promise(resolve => setTimeout(resolve, 1500));
      
      const newUser = {
        id: Date.now(),
        email: userData.email,
        firstName: userData.firstName,
        lastName: userData.lastName,
        phone: userData.phone,
        isAuthenticated: true,
        registeredAt: new Date().toISOString()
      };
      
      setUser(newUser);
      localStorage.setItem('bloomshine-user', JSON.stringify(newUser));
      showNotification(`–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è —É—Å–ø—ñ—à–Ω–∞! –í—ñ—Ç–∞—î–º–æ, ${newUser.firstName}!`, 'success');
    } catch (error) {
      throw new Error('–ü–æ–º–∏–ª–∫–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó');
    } finally {
      setIsLoading(false);
    }
  };

  const handleLogout = () => {
    setUser(null);
    localStorage.removeItem('bloomshine-user');
    showNotification('–í–∏ –≤–∏–π—à–ª–∏ –∑ –∞–∫–∞—É–Ω—Ç—É', 'info');
  };

  // ========== –§–£–ù–ö–¶–ò–ò UI ==========
  const openCart = () => setIsCartOpen(true);
  const closeCart = () => setIsCartOpen(false);
  const openAuth = () => setIsAuthOpen(true);
  const closeAuth = () => setIsAuthOpen(false);

  const showNotification = (message, type = 'info') => {
    // TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —Å–∏—Å—Ç–µ–º—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    console.log(`[${type.toUpperCase()}] ${message}`);
  };

  // ========== –§–£–ù–ö–¶–ò–ò –ó–ê–ö–ê–ó–ê ==========
  const handleOrderComplete = (orderData) => {
    // –û—á–∏—â–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞
    clearCart();
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–∫–∞–∑ –≤ localStorage –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏
    const orders = JSON.parse(localStorage.getItem('bloomshine-orders') || '[]');
    orders.push(orderData);
    localStorage.setItem('bloomshine-orders', JSON.stringify(orders));
    
    showNotification('–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è —É—Å–ø—ñ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–æ!', 'success');
  };

  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥—Ä—É–∑—á–∏–∫ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
  if (isLoading) {
    return (
      <div className="app-loading">
        <div className="loading-container">
          <div className="loading-spinner">üå∏</div>
          <h2>BloomShine</h2>
          <p>–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è...</p>
        </div>
      </div>
    );
  }

  return (
    <Router>
      <div className="App">
        {/* Header */}
        <Header 
          cartCount={getCartItemsCount()}
          isAuthenticated={!!user}
          user={user}
          onCartClick={openCart}
          onAuthClick={openAuth}
          onLogout={handleLogout}
        />

        {/* Main Content */}
        <main className="main-content">
          <Routes>
            {/* –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ */}
            <Route 
              path="/" 
              element={
                <Home 
                  onAddToCart={addToCart}
                />
              } 
            />
            
            {/* –ö–∞—Ç–∞–ª–æ–≥ */}
            <Route 
              path="/catalog" 
              element={
                <Catalog 
                  onAddToCart={addToCart}
                />
              } 
            />
            
            {/* –°—Ç—Ä–∞–Ω–∏—Ü–∞ —Ç–æ–≤–∞—Ä–∞ */}
            <Route 
              path="/product/:id" 
              element={
                <Product 
                  onAddToCart={addToCart}
                />
              } 
            />
            
            {/* –°—Ç—Ä–∞–Ω–∏—Ü–∞ –∫–æ—Ä–∑–∏–Ω—ã */}
            <Route 
              path="/cart" 
              element={
                <CartPage 
                  cartItems={cartItems}
                  onUpdateQuantity={updateCartQuantity}
                  onRemoveItem={removeFromCart}
                  onClearCart={clearCart}
                />
              } 
            />
            
            {/* –û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ */}
            <Route 
              path="/checkout" 
              element={
                <Checkout 
                  cartItems={cartItems}
                  onOrderComplete={handleOrderComplete}
                />
              } 
            />

            {/* –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã */}
            <Route 
              path="/about" 
              element={
                <div className="page-placeholder">
                  <div className="container">
                    <h1>üå∏ –ü—Ä–æ –Ω–∞—Å</h1>
                    <p>–°—Ç–æ—Ä—ñ–Ω–∫–∞ –≤ —Ä–æ–∑—Ä–æ–±—Ü—ñ...</p>
                  </div>
                </div>
              } 
            />
            
            <Route 
              path="/contact" 
              element={
                <div className="page-placeholder">
                  <div className="container">
                    <h1>üìû –ö–æ–Ω—Ç–∞–∫—Ç–∏</h1>
                    <p>–°—Ç–æ—Ä—ñ–Ω–∫–∞ –≤ —Ä–æ–∑—Ä–æ–±—Ü—ñ...</p>
                  </div>
                </div>
              } 
            />

            {/* 404 —Å—Ç—Ä–∞–Ω–∏—Ü–∞ */}
            <Route 
              path="*" 
              element={
                <div className="page-404">
                  <div className="container">
                    <div className="error-content">
                      <h1>üå∏ 404</h1>
                      <h2>–°—Ç–æ—Ä—ñ–Ω–∫–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞</h2>
                      <p>–í–∏–±–∞—á—Ç–µ, –∞–ª–µ —Å—Ç–æ—Ä—ñ–Ω–∫–∞, —è–∫—É –≤–∏ —à—É–∫–∞—î—Ç–µ, –Ω–µ —ñ—Å–Ω—É—î.</p>
                      <a href="/" className="home-link">
                        üè† –ù–∞ –≥–æ–ª–æ–≤–Ω—É
                      </a>
                    </div>
                  </div>
                </div>
              } 
            />
          </Routes>
        </main>

        {/* Footer */}
        <Footer />

        {/* Cart Sidebar */}
        <Cart 
          cartItems={cartItems}
          onUpdateQuantity={updateCartQuantity}
          onRemoveItem={removeFromCart}
          onClearCart={clearCart}
          isOpen={isCartOpen}
          onClose={closeCart}
        />

        {/* Auth Modal */}
        <Auth 
          onLogin={handleLogin}
          onRegister={handleRegister}
          onClose={closeAuth}
          isOpen={isAuthOpen}
        />

        {/* Global Loading Overlay */}
        {isLoading && (
          <div className="global-loading">
            <div className="loading-spinner">‚è≥</div>
          </div>
        )}
      </div>
    </Router>
  );
};

export default App;