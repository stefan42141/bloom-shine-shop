import React, { useState, useEffect } from 'react';
import { useParams, useNavigate } from 'react-router-dom';
import '../styles/pages/Product.css';

const Product = ({ onAddToCart }) => {
  const { id } = useParams();
  const navigate = useNavigate();
  
  const [product, setProduct] = useState(null);
  const [isLoading, setIsLoading] = useState(true);
  const [selectedImage, setSelectedImage] = useState(0);
  const [selectedSize, setSelectedSize] = useState('');
  const [quantity, setQuantity] = useState(1);
  const [activeTab, setActiveTab] = useState('description');
  const [isAddingToCart, setIsAddingToCart] = useState(false);

  // –ü—Ä–µ–º–∏–∞–ª—å–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã
  const luxurySizes = [
    { id: 'small', name: '–ú—ñ–Ω—ñ', description: '–ï–ª–µ–≥–∞–Ω—Ç–Ω–∞ –º—ñ–Ω—ñ–∞—Ç—é—Ä–∞', price: 0, icon: 'üå∏' },
    { id: 'medium', name: '–°—Ç–∞–Ω–¥–∞—Ä—Ç', description: '–ö–ª–∞—Å–∏—á–Ω–∏–π —Ä–æ–∑–º—ñ—Ä', price: 0, icon: 'üå∫' },
    { id: 'large', name: '–ü—Ä–µ–º—ñ—É–º', description: '–†–æ–∑–∫—ñ—à–Ω–∞ –∫–æ–º–ø–æ–∑–∏—Ü—ñ—è', price: 1000, icon: 'üëë' },
    { id: 'xl', name: '–õ—é–∫—Å', description: '–ì—Ä–∞–Ω–¥—ñ–æ–∑–Ω–∞ —Ä–æ–∑–∫—ñ—à', price: 2500, icon: 'üíé' }
  ];

  // –ú–æ–∫ –¥–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä–∞
  const getProductById = async (productId) => {
    await new Promise(resolve => setTimeout(resolve, 1000));
    
    return {
      id: productId,
      name: 'Midnight Embrace Luxury Box',
      category: '–ü—Ä–µ–º—ñ–∞–ª—å–Ω—ñ –±–æ–∫—Å–∏',
      shortDescription: '–ü—Ä–µ–º—ñ–∞–ª—å–Ω–∏–π –±–æ–∫—Å –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –º—ñ—Å—Ç–∏—á–Ω–æ—ó –∞—Ç–º–æ—Å—Ñ–µ—Ä–∏ –∑ —á–æ—Ä–Ω–∏–º–∏ —Ç—Ä–æ—è–Ω–¥–∞–º–∏ —Ç–∞ –∑–æ–ª–æ—Ç–∏–º–∏ –∞–∫—Ü–µ–Ω—Ç–∞–º–∏',
      fullDescription: `–ï–∫—Å–∫–ª—é–∑–∏–≤–Ω–∞ –∫–æ–ª–µ–∫—Ü—ñ—è "Midnight Embrace" —Å—Ç–≤–æ—Ä–µ–Ω–∞ –¥–ª—è —Ç–∏—Ö, —Ö—Ç–æ —Ü—ñ–Ω—É—î —Å–ø—Ä–∞–≤–∂–Ω—é —Ä–æ–∑–∫—ñ—à —Ç–∞ –≤–∏—Ç–æ–Ω—á–µ–Ω—ñ—Å—Ç—å. 
      
      –ö–æ–∂–µ–Ω –±–æ–∫—Å –º–∞–π—Å—Ç–µ—Ä–Ω–æ –≤–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–π –≤—Ä—É—á–Ω—É –∑ –Ω–∞–π—è–∫—ñ—Å–Ω—ñ—à–∏—Ö –º–∞—Ç–µ—Ä—ñ–∞–ª—ñ–≤ —Ç–∞ –æ–∑–¥–æ–±–ª–µ–Ω–∏–π –∑–æ–ª–æ—Ç–∏–º–∏ –∞–∫—Ü–µ–Ω—Ç–∞–º–∏. –ß–æ—Ä–Ω—ñ —Ç—Ä–æ—è–Ω–¥–∏ –ø—Ä–µ–º—ñ—É–º-–∫–ª–∞—Å—É –¥–æ–ø–æ–≤–Ω–µ–Ω—ñ —Ä—ñ–¥–∫—ñ—Å–Ω–∏–º–∏ –∫–≤—ñ—Ç–∞–º–∏ —Ç–∞ –∫—Ä–∏—Å—Ç–∞–ª–∞–º–∏ Swarovski.
      
      –¶—è –∫–æ–º–ø–æ–∑–∏—Ü—ñ—è —ñ–¥–µ–∞–ª—å–Ω–æ –ø—ñ–¥—Ö–æ–¥–∏—Ç—å –¥–ª—è –æ—Å–æ–±–ª–∏–≤–∏—Ö –º–æ–º–µ–Ω—Ç—ñ–≤ —Ç–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–µ–∑–∞–±—É—Ç–Ω—å–æ—ó –∞—Ç–º–æ—Å—Ñ–µ—Ä–∏ —Ä–æ–º–∞–Ω—Ç–∏–∫–∏ —Ç–∞ —Ç–∞—î–º–Ω–∏—á–æ—Å—Ç—ñ.`,
      
      price: 4299,
      oldPrice: 4999,
      
      images: [
        'https://via.placeholder.com/800x800/2a2a2a/d4af37?text=üå∏+Main',
        'https://via.placeholder.com/800x800/1a1a1a/d4af37?text=üåπ+Detail+1',
        'https://via.placeholder.com/800x800/0f0f0f/d4af37?text=üíé+Detail+2',
        'https://via.placeholder.com/800x800/2d2d2d/d4af37?text=‚ú®+Detail+3',
        'https://via.placeholder.com/800x800/1e1e1e/d4af37?text=üëë+Detail+4'
      ],
      
      rating: 4.9,
      reviewsCount: 127,
      inStock: true,
      stockQuantity: 8,
      
      badge: { type: 'premium', text: 'Limited Edition' },
      luxury: true,
      
      features: [
        { icon: 'üåπ', title: '–ü—Ä–µ–º—ñ–∞–ª—å–Ω—ñ —Ç—Ä–æ—è–Ω–¥–∏', description: '–†—ñ–¥–∫—ñ—Å–Ω—ñ —á–æ—Ä–Ω—ñ —Ç—Ä–æ—è–Ω–¥–∏ –∑ –µ–∫–≤–∞–¥–æ—Ä—Å—å–∫–∏—Ö –ø–ª–∞–Ω—Ç–∞—Ü—ñ–π' },
        { icon: 'üíé', title: '–ö—Ä–∏—Å—Ç–∞–ª–∏ Swarovski', description: '–°–ø—Ä–∞–≤–∂–Ω—ñ –∞–≤—Å—Ç—Ä—ñ–π—Å—å–∫—ñ –∫—Ä–∏—Å—Ç–∞–ª–∏ —Ä—É—á–Ω–æ—ó —Ä–æ–±–æ—Ç–∏' },
        { icon: 'üé®', title: '–ê–≤—Ç–æ—Ä—Å—å–∫–∏–π –¥–∏–∑–∞–π–Ω', description: '–ï–∫—Å–∫–ª—é–∑–∏–≤–Ω–∞ –∫–æ–º–ø–æ–∑–∏—Ü—ñ—è –≤—ñ–¥ —Ç–æ–ø-—Ñ–ª–æ—Ä–∏—Å—Ç—ñ–≤' },
        { icon: 'üì¶', title: '–ü—Ä–µ–º—ñ—É–º —É–ø–∞–∫–æ–≤–∫–∞', description: '–†–æ–∑–∫—ñ—à–Ω–∞ –ø–æ–¥–∞—Ä—É–Ω–∫–æ–≤–∞ —É–ø–∞–∫–æ–≤–∫–∞ –∑ –∑–æ–ª–æ—Ç–∏–º —Ç–∏—Å–Ω–µ–Ω–Ω—è–º' },
        { icon: 'üöö', title: 'VIP –¥–æ—Å—Ç–∞–≤–∫–∞', description: '–ï–∫—Å–ø—Ä–µ—Å-–¥–æ—Å—Ç–∞–≤–∫–∞ –∑ —Ö–æ–ª–æ–¥–∏–ª—å–Ω–∏–º —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–æ–º' },
        { icon: 'üéØ', title: '–ì–∞—Ä–∞–Ω—Ç—ñ—è —Å–≤—ñ–∂–æ—Å—Ç—ñ', description: '7 –¥–Ω—ñ–≤ –≥–∞—Ä–∞–Ω—Ç—ñ—ó –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –ø–µ—Ä–≤–∏–Ω–Ω–æ–≥–æ –≤–∏–≥–ª—è–¥—É' }
      ],
      
      specifications: [
        { label: '–†–æ–∑–º—ñ—Ä –±–æ–∫—Å—É', value: '30 x 30 x 15 —Å–º' },
        { label: '–ú–∞—Ç–µ—Ä—ñ–∞–ª', value: '–ù–∞—Ç—É—Ä–∞–ª—å–Ω–∞ —à–∫—ñ—Ä–∞ –ø—Ä–µ–º—ñ—É–º-–∫–ª–∞—Å—É' },
        { label: '–ö—ñ–ª—å–∫—ñ—Å—Ç—å –∫–≤—ñ—Ç—ñ–≤', value: '25-30 —Ç—Ä–æ—è–Ω–¥' },
        { label: '–ö—Ä–∞—ó–Ω–∞ –ø–æ—Ö–æ–¥–∂–µ–Ω–Ω—è', value: '–ï–∫–≤–∞–¥–æ—Ä' },
        { label: '–¢–µ—Ä–º—ñ–Ω —Å–≤—ñ–∂–æ—Å—Ç—ñ', value: '7-10 –¥–Ω—ñ–≤' },
        { label: '–í–∞–≥–∞', value: '2.5 –∫–≥' }
      ],
      
      careInstructions: [
        'üíß –û–±–µ—Ä–µ–∂–Ω–æ —Ä–æ–∑–ø–∏–ª—é–π—Ç–µ –≤–æ–¥—É –Ω–∞ –ø–µ–ª—é—Å—Ç–∫–∏ —Ä–∞–∑ –Ω–∞ –¥–µ–Ω—å',
        'üå°Ô∏è –ó–±–µ—Ä—ñ–≥–∞–π—Ç–µ –ø—Ä–∏ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ñ 18-22¬∞C',
        '‚òÄÔ∏è –£–Ω–∏–∫–∞–π—Ç–µ –ø—Ä—è–º–∏—Ö —Å–æ–Ω—è—á–Ω–∏—Ö –ø—Ä–æ–º–µ–Ω—ñ–≤',
        'üå¨Ô∏è –¢—Ä–∏–º–∞–π—Ç–µ –ø–æ–¥–∞–ª—ñ –≤—ñ–¥ –∫–æ–Ω–¥–∏—Ü—ñ–æ–Ω–µ—Ä—ñ–≤ —Ç–∞ –æ–±—ñ–≥—Ä—ñ–≤–∞—á—ñ–≤',
        '‚úÇÔ∏è –û–±—Ä—ñ–∑–∞–π—Ç–µ —Å—Ç–µ–±–ª–∞ –ø—ñ–¥ –∫—É—Ç–æ–º –∫–æ–∂–Ω—ñ 2-3 –¥–Ω—ñ',
        'üßπ –í–∏–¥–∞–ª—è–π—Ç–µ –∑—ñ–≤\'—è–ª—ñ –ø–µ–ª—é—Å—Ç–∫–∏ –¥–ª—è –ø–æ–¥–æ–≤–∂–µ–Ω–Ω—è —Å–≤—ñ–∂–æ—Å—Ç—ñ'
      ],
      
      reviews: [
        {
          id: 1,
          name: '–ê–Ω–Ω–∞ –ö.',
          rating: 5,
          date: '2024-01-15',
          comment: '–ù–µ–π–º–æ–≤—ñ—Ä–Ω–æ –∫—Ä–∞—Å–∏–≤–æ! –Ø–∫—ñ—Å—Ç—å –Ω–∞ –Ω–∞–π–≤–∏—â–æ–º—É —Ä—ñ–≤–Ω—ñ. –î—É–∂–µ –∑–∞–¥–æ–≤–æ–ª–µ–Ω–∞ –ø–æ–∫—É–ø–∫–æ—é.',
          verified: true
        },
        {
          id: 2,
          name: '–ú–∏—Ö–∞–π–ª–æ –ü.',
          rating: 5,
          date: '2024-01-10',
          comment: '–ü–æ–¥–∞—Ä—É–≤–∞–≤ –¥—Ä—É–∂–∏–Ω—ñ –Ω–∞ —Ä—ñ—á–Ω–∏—Ü—é - –≤–æ–Ω–∞ –≤ –∑–∞—Ö–≤–∞—Ç—ñ! –†–µ–∫–æ–º–µ–Ω–¥—É—é –≤—Å—ñ–º.',
          verified: true
        },
        {
          id: 3,
          name: '–û–ª–µ–Ω–∞ –í.',
          rating: 4,
          date: '2024-01-05',
          comment: '–ö—Ä–∞—Å–∏–≤–∞ –∫–æ–º–ø–æ–∑–∏—Ü—ñ—è, –∞–ª–µ —Ü—ñ–Ω–∞ —Ç—Ä–æ—Ö–∏ –≤–∏—Å–æ–∫–∞. –í —Ü—ñ–ª–æ–º—É –∑–∞–¥–æ–≤–æ–ª–µ–Ω–∞.',
          verified: false
        }
      ]
    };
  };

  useEffect(() => {
    const loadProduct = async () => {
      try {
        const productData = await getProductById(id);
        setProduct(productData);
        setSelectedSize(luxurySizes[1].id); // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å—Ä–µ–¥–Ω–∏–π —Ä–∞–∑–º–µ—Ä
      } catch (error) {
        console.error('–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ç–æ–≤–∞—Ä—É:', error);
        navigate('/catalog');
      } finally {
        setIsLoading(false);
      }
    };
    
    loadProduct();
  }, [id, navigate]);

  const handleAddToCart = async () => {
    if (!selectedSize) {
      alert('–ë—É–¥—å –ª–∞—Å–∫–∞, –æ–±–µ—Ä—ñ—Ç—å —Ä–æ–∑–º—ñ—Ä');
      return;
    }

    setIsAddingToCart(true);
    
    try {
      await new Promise(resolve => setTimeout(resolve, 800));
      
      const selectedSizeInfo = luxurySizes.find(size => size.id === selectedSize);
      const finalPrice = product.price + selectedSizeInfo.price;
      
      const cartItem = {
        ...product,
        selectedSize: selectedSize,
        quantity: quantity,
        finalPrice: finalPrice
      };
      
      onAddToCart(cartItem);
    } catch (error) {
      console.error('–ü–æ–º–∏–ª–∫–∞ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –¥–æ –∫–æ—à–∏–∫–∞:', error);
    } finally {
      setIsAddingToCart(false);
    }
  };

  const getCurrentPrice = () => {
    if (!product || !selectedSize) return product?.price || 0;
    
    const selectedSizeInfo = luxurySizes.find(size => size.id === selectedSize);
    return product.price + (selectedSizeInfo?.price || 0);
  };

  if (isLoading) {
    return (
      <div className="product-loading">
        <div className="container">
          <div className="loading-content">
            <div className="loading-spinner luxury-spinner">
              <div className="spinner-icon">üå∏</div>
            </div>
            <h2>–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ä–æ–∑–∫–æ—à—ñ...</h2>
            <p>–ü—ñ–¥–≥–æ—Ç–æ–≤—É—î–º–æ –µ–∫—Å–∫–ª—é–∑–∏–≤–Ω—ñ –¥–µ—Ç–∞–ª—ñ –¥–ª—è –≤–∞—Å</p>
          </div>
        </div>
      </div>
    );
  }

  if (!product) {
    return (
      <div className="product-not-found">
        <div className="container">
          <div className="not-found-content">
            <div className="not-found-icon">üå∏</div>
            <h2>–¢–æ–≤–∞—Ä –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ</h2>
            <p>–í–∏–±–∞—á—Ç–µ, –∞–ª–µ —Ü–µ–π —Ç–æ–≤–∞—Ä –±—ñ–ª—å—à–µ –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∏–π</p>
            <button 
              className="luxury-button"
              onClick={() => navigate('/catalog')}
            >
              üè† –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –¥–æ –∫–∞—Ç–∞–ª–æ–≥—É
            </button>
          </div>
        </div>
      </div>
    );
  }

  return (
    <div className="product-page">
      {/* Breadcrumbs */}
      <section className="breadcrumbs-section">
        <div className="container">
          <nav className="breadcrumbs">
            <button onClick={() => navigate('/')} className="breadcrumb-link">
              üè† –ì–æ–ª–æ–≤–Ω–∞
            </button>
            <span className="breadcrumb-separator">‚Ä∫</span>
            <button onClick={() => navigate('/catalog')} className="breadcrumb-link">
              üìñ –ö–∞—Ç–∞–ª–æ–≥
            </button>
            <span className="breadcrumb-separator">‚Ä∫</span>
            <span className="breadcrumb-current">{product.name}</span>
          </nav>
        </div>
      </section>

      {/* Main Product Section */}
      <section className="product-main">
        <div className="container">
          <div className="product-grid">
            {/* Product Gallery */}
            <div className="product-gallery">
              <div className="main-image-container">
                <img 
                  src={product.images[selectedImage]} 
                  alt={product.name}
                  className="main-image"
                />
                <div className="image-overlay">
                  <div className="luxury-badge-overlay">
                    <span className="badge-icon">üëë</span>
                    {product.badge.text}
                  </div>
                </div>
              </div>
              
              <div className="thumbnail-gallery">
                {product.images.map((image, index) => (
                  <button
                    key={index}
                    className={`thumbnail ${index === selectedImage ? 'active' : ''}`}
                    onClick={() => setSelectedImage(index)}
                  >
                    <img src={image} alt={`${product.name} ${index + 1}`} />
                  </button>
                ))}
              </div>
            </div>

            {/* Product Info */}
            <div className="product-info">
              <div className="product-header">
                <div className="product-category">{product.category}</div>
                <h1 className="product-title">{product.name}</h1>
                <p className="product-description">{product.shortDescription}</p>
                
                <div className="product-rating">
                  <div className="stars">
                    {[...Array(5)].map((_, i) => (
                      <span key={i} className={i < Math.floor(product.rating) ? 'star filled' : 'star'}>
                        ‚≠ê
                      </span>
                    ))}
                  </div>
                  <span className="rating-text">
                    {product.rating} ({product.reviewsCount} –≤—ñ–¥–≥—É–∫—ñ–≤)
                  </span>
                </div>
              </div>

              <div className="product-pricing">
                {product.oldPrice && (
                  <span className="old-price">{product.oldPrice} ‚Ç¥</span>
                )}
                <span className="current-price">{getCurrentPrice()} ‚Ç¥</span>
                {product.oldPrice && (
                  <span className="discount">
                    –ó–Ω–∏–∂–∫–∞ {Math.round((1 - product.price / product.oldPrice) * 100)}%
                  </span>
                )}
              </div>

              {/* Size Selection */}
              <div className="size-selection">
                <h3 className="selection-title">
                  <span className="title-icon">üìè</span>
                  –û–±–µ—Ä—ñ—Ç—å —Ä–æ–∑–º—ñ—Ä
                </h3>
                <div className="size-options">
                  {luxurySizes.map(size => (
                    <label 
                      key={size.id}
                      className={`size-option ${selectedSize === size.id ? 'selected' : ''}`}
                    >
                      <input
                        type="radio"
                        name="size"
                        value={size.id}
                        checked={selectedSize === size.id}
                        onChange={(e) => setSelectedSize(e.target.value)}
                      />
                      <div className="size-content">
                        <span className="size-icon">{size.icon}</span>
                        <div className="size-details">
                          <span className="size-name">{size.name}</span>
                          <span className="size-description">{size.description}</span>
                          {size.price > 0 && (
                            <span className="size-price">+{size.price} ‚Ç¥</span>
                          )}
                        </div>
                      </div>
                    </label>
                  ))}
                </div>
              </div>

              {/* Quantity & Add to Cart */}
              <div className="purchase-section">
                <div className="quantity-selector">
                  <label className="quantity-label">–ö—ñ–ª—å–∫—ñ—Å—Ç—å:</label>
                  <div className="quantity-controls">
                    <button 
                      className="quantity-btn"
                      onClick={() => setQuantity(Math.max(1, quantity - 1))}
                      disabled={quantity <= 1}
                    >
                      -
                    </button>
                    <span className="quantity-value">{quantity}</span>
                    <button 
                      className="quantity-btn"
                      onClick={() => setQuantity(Math.min(product.stockQuantity, quantity + 1))}
                      disabled={quantity >= product.stockQuantity}
                    >
                      +
                    </button>
                  </div>
                </div>

                <div className="purchase-actions">
                  <button 
                    className={`add-to-cart-btn luxury-button ${isAddingToCart ? 'loading' : ''}`}
                    onClick={handleAddToCart}
                    disabled={isAddingToCart || !product.inStock}
                  >
                    {isAddingToCart ? (
                      <>
                        <span className="loading-spinner">‚è≥</span>
                        –î–æ–¥–∞—î–º–æ...
                      </>
                    ) : (
                      <>
                        <span className="cart-icon">üõí</span>
                        –î–æ–¥–∞—Ç–∏ –¥–æ –∫–æ—à–∏–∫–∞
                      </>
                    )}
                  </button>
                  
                  <button className="buy-now-btn luxury-button-outline">
                    <span className="lightning-icon">‚ö°</span>
                    –ö—É–ø–∏—Ç–∏ –∑–∞—Ä–∞–∑
                  </button>
                </div>

                <div className="stock-info">
                  {product.inStock ? (
                    <span className="in-stock">
                      ‚úÖ –í –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ ({product.stockQuantity} —à—Ç.)
                    </span>
                  ) : (
                    <span className="out-of-stock">
                      ‚ùå –ù–µ–º–∞—î –≤ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ
                    </span>
                  )}
                </div>
              </div>

              {/* Features */}
              <div className="product-features">
                <h3 className="features-title">
                  <span className="title-icon">‚ú®</span>
                  –ü–µ—Ä–µ–≤–∞–≥–∏
                </h3>
                <div className="features-grid">
                  {product.features.map((feature, index) => (
                    <div key={index} className="feature-item">
                      <span className="feature-icon">{feature.icon}</span>
                      <div className="feature-content">
                        <span className="feature-title">{feature.title}</span>
                        <span className="feature-description">{feature.description}</span>
                      </div>
                    </div>
                  ))}
                </div>
              </div>
            </div>
          </div>
        </div>
      </section>

      {/* Product Details Tabs */}
      <section className="product-details">
        <div className="container">
          <div className="tabs-container">
            <div className="tabs-header">
              <button 
                className={`tab-btn ${activeTab === 'description' ? 'active' : ''}`}
                onClick={() => setActiveTab('description')}
              >
                üìù –û–ø–∏—Å
              </button>
              <button 
                className={`tab-btn ${activeTab === 'specifications' ? 'active' : ''}`}
                onClick={() => setActiveTab('specifications')}
              >
                üìä –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
              </button>
              <button 
                className={`tab-btn ${activeTab === 'care' ? 'active' : ''}`}
                onClick={() => setActiveTab('care')}
              >
                üåø –î–æ–≥–ª—è–¥
              </button>
              <button 
                className={`tab-btn ${activeTab === 'reviews' ? 'active' : ''}`}
                onClick={() => setActiveTab('reviews')}
              >
                ‚≠ê –í—ñ–¥–≥—É–∫–∏ ({product.reviewsCount})
              </button>
            </div>

            <div className="tabs-content">
              {activeTab === 'description' && (
                <div className="tab-content description-tab">
                  <h3>–î–µ—Ç–∞–ª—å–Ω–∏–π –æ–ø–∏—Å</h3>
                  <div className="description-content">
                    {product.fullDescription.split('\n').map((paragraph, index) => (
                      <p key={index}>{paragraph}</p>
                    ))}
                  </div>
                </div>
              )}

              {activeTab === 'specifications' && (
                <div className="tab-content specifications-tab">
                  <h3>–¢–µ—Ö–Ω—ñ—á–Ω—ñ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏</h3>
                  <div className="specifications-grid">
                    {product.specifications.map((spec, index) => (
                      <div key={index} className="spec-item">
                        <span className="spec-label">{spec.label}:</span>
                        <span className="spec-value">{spec.value}</span>
                      </div>
                    ))}
                  </div>
                </div>
              )}

              {activeTab === 'care' && (
                <div className="tab-content care-tab">
                  <h3>–Ü–Ω—Å—Ç—Ä—É–∫—Ü—ñ—ó –∑ –¥–æ–≥–ª—è–¥—É</h3>
                  <div className="care-instructions">
                    {product.careInstructions.map((instruction, index) => (
                      <div key={index} className="care-item">
                        {instruction}
                      </div>
                    ))}
                  </div>
                </div>
              )}

              {activeTab === 'reviews' && (
                <div className="tab-content reviews-tab">
                  <h3>–í—ñ–¥–≥—É–∫–∏ –ø–æ–∫—É–ø—Ü—ñ–≤</h3>
                  <div className="reviews-container">
                    {product.reviews.map(review => (
                      <div key={review.id} className="review-item">
                        <div className="review-header">
                          <div className="reviewer-info">
                            <span className="reviewer-name">{review.name}</span>
                            {review.verified && (
                              <span className="verified-badge">‚úÖ –ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–∞ –ø–æ–∫—É–ø–∫–∞</span>
                            )}
                          </div>
                          <div className="review-rating">
                            {[...Array(5)].map((_, i) => (
                              <span key={i} className={i < review.rating ? 'star filled' : 'star'}>
                                ‚≠ê
                              </span>
                            ))}
                          </div>
                        </div>
                        <div className="review-content">
                          <p>{review.comment}</p>
                        </div>
                        <div className="review-date">
                          {new Date(review.date).toLocaleDateString('uk-UA')}
                        </div>
                      </div>
                    ))}
                  </div>
                </div>
              )}
            </div>
          </div>
        </div>
      </section>
    </div>
  );
};

export default Product;