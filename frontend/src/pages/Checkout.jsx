import React, { useState, useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
import '../styles/pages/Checkout.css';

const Checkout = ({ cartItems, onOrderComplete }) => {
  const navigate = useNavigate();
  
  const [step, setStep] = useState(1); // 1: Delivery, 2: Payment, 3: Confirmation
  const [isLoading, setIsLoading] = useState(false);
  const [orderData, setOrderData] = useState({
    // Delivery Info
    firstName: '',
    lastName: '',
    phone: '',
    email: '',
    city: '–ö–∏—ó–≤',
    address: '',
    deliveryType: 'courier', // courier, pickup, nova-poshta
    deliveryTime: 'standard', // standard, express, scheduled
    scheduledDate: '',
    scheduledTime: '',
    
    // Payment Info
    paymentMethod: 'card', // card, cash, online
    cardNumber: '',
    cardExpiry: '',
    cardCvv: '',
    cardName: '',
    
    // Additional
    comment: '',
    giftWrap: false,
    giftMessage: '',
    newsletter: false
  });
  
  const [errors, setErrors] = useState({});
  const [promoCode, setPromoCode] = useState('');
  const [discount, setDiscount] = useState(0);

  // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –µ—Å–ª–∏ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞
  useEffect(() => {
    if (cartItems.length === 0) {
      navigate('/cart');
    }
  }, [cartItems, navigate]);

  // –ü–æ–¥—Å—á–µ—Ç —Å—É–º–º
  const calculateSubtotal = () => {
    return cartItems.reduce((total, item) => total + (item.price * item.quantity), 0);
  };

  const calculateDeliveryPrice = () => {
    if (orderData.deliveryType === 'pickup') return 0;
    if (orderData.deliveryType === 'express') return 300;
    if (calculateSubtotal() >= 1000) return 0;
    return 150;
  };

  const calculateDiscount = () => {
    return (calculateSubtotal() * discount) / 100;
  };

  const calculateTotal = () => {
    return calculateSubtotal() + calculateDeliveryPrice() - calculateDiscount();
  };

  const handleInputChange = (field, value) => {
    setOrderData(prev => ({
      ...prev,
      [field]: value
    }));
    
    // –û—á–∏—â–∞–µ–º –æ—à–∏–±–∫—É –ø—Ä–∏ –≤–≤–æ–¥–µ
    if (errors[field]) {
      setErrors(prev => ({
        ...prev,
        [field]: ''
      }));
    }
  };

  const validateStep = (stepNumber) => {
    const newErrors = {};

    if (stepNumber === 1) {
      // –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–æ—Å—Ç–∞–≤–∫–∏
      if (!orderData.firstName.trim()) newErrors.firstName = '–Ü–º\'—è –æ–±–æ–≤\'—è–∑–∫–æ–≤–µ';
      if (!orderData.lastName.trim()) newErrors.lastName = '–ü—Ä—ñ–∑–≤–∏—â–µ –æ–±–æ–≤\'—è–∑–∫–æ–≤–µ';
      if (!orderData.phone.trim()) newErrors.phone = '–¢–µ–ª–µ—Ñ–æ–Ω –æ–±–æ–≤\'—è–∑–∫–æ–≤–∏–π';
      if (!orderData.email.trim()) newErrors.email = 'Email –æ–±–æ–≤\'—è–∑–∫–æ–≤–∏–π';
      else if (!/\S+@\S+\.\S+/.test(orderData.email)) newErrors.email = '–ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç email';
      
      if (orderData.deliveryType === 'courier') {
        if (!orderData.address.trim()) newErrors.address = '–ê–¥—Ä–µ—Å–∞ –æ–±–æ–≤\'—è–∑–∫–æ–≤–∞';
      }
      
      if (orderData.deliveryTime === 'scheduled') {
        if (!orderData.scheduledDate) newErrors.scheduledDate = '–û–±–µ—Ä—ñ—Ç—å –¥–∞—Ç—É –¥–æ—Å—Ç–∞–≤–∫–∏';
        if (!orderData.scheduledTime) newErrors.scheduledTime = '–û–±–µ—Ä—ñ—Ç—å —á–∞—Å –¥–æ—Å—Ç–∞–≤–∫–∏';
      }
    }

    if (stepNumber === 2) {
      // –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –æ–ø–ª–∞—Ç—ã
      if (orderData.paymentMethod === 'card') {
        if (!orderData.cardNumber.trim()) newErrors.cardNumber = '–ù–æ–º–µ—Ä –∫–∞—Ä—Ç–∫–∏ –æ–±–æ–≤\'—è–∑–∫–æ–≤–∏–π';
        if (!orderData.cardExpiry.trim()) newErrors.cardExpiry = '–¢–µ—Ä–º—ñ–Ω –¥—ñ—ó –æ–±–æ–≤\'—è–∑–∫–æ–≤–∏–π';
        if (!orderData.cardCvv.trim()) newErrors.cardCvv = 'CVV –∫–æ–¥ –æ–±–æ–≤\'—è–∑–∫–æ–≤–∏–π';
        if (!orderData.cardName.trim()) newErrors.cardName = '–Ü–º\'—è –≤–ª–∞—Å–Ω–∏–∫–∞ –æ–±–æ–≤\'—è–∑–∫–æ–≤–µ';
      }
    }

    setErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  };

  const handleNextStep = () => {
    if (validateStep(step)) {
      setStep(step + 1);
    }
  };

  const handlePrevStep = () => {
    setStep(step - 1);
  };

  const handlePromoCode = () => {
    if (promoCode === 'BLOOM10') {
      setDiscount(10);
    } else if (promoCode === 'PREMIUM15') {
      setDiscount(15);
    } else if (promoCode === 'FIRST20') {
      setDiscount(20);
    } else {
      setDiscount(0);
    }
  };

  const handleSubmitOrder = async () => {
    if (!validateStep(2)) return;

    setIsLoading(true);
    
    try {
      // –ò–º–∏—Ç–∞—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–∫–∞–∑–∞
      await new Promise(resolve => setTimeout(resolve, 2000));
      
      const order = {
        id: Date.now(),
        items: cartItems,
        customer: orderData,
        total: calculateTotal(),
        status: 'confirmed',
        createdAt: new Date().toISOString()
      };
      
      onOrderComplete(order);
      setStep(3);
    } catch (error) {
      console.error('–ü–æ–º–∏–ª–∫–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:', error);
      alert('–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è');
    } finally {
      setIsLoading(false);
    }
  };

  const cities = [
    '–ö–∏—ó–≤', '–•–∞—Ä–∫—ñ–≤', '–û–¥–µ—Å–∞', '–î–Ω—ñ–ø—Ä–æ', '–î–æ–Ω–µ—Ü—å–∫', '–ó–∞–ø–æ—Ä—ñ–∂–∂—è', 
    '–õ—å–≤—ñ–≤', '–ö—Ä–∏–≤–∏–π –†—ñ–≥', '–ú–∏–∫–æ–ª–∞—ó–≤', '–ú–∞—Ä—ñ—É–ø–æ–ª—å', '–õ—É–≥–∞–Ω—Å—å–∫', '–í–∏–Ω–Ω–∏—Ü—è'
  ];

  const timeSlots = [
    '09:00-12:00', '12:00-15:00', '15:00-18:00', '18:00-21:00'
  ];

  if (cartItems.length === 0) {
    return null;
  }

  return (
    <div className="checkout-page">
      <div className="container">
        {/* Progress Steps */}
        <div className="checkout-progress">
          <div className={`progress-step ${step >= 1 ? 'active' : ''} ${step > 1 ? 'completed' : ''}`}>
            <div className="step-number">1</div>
            <div className="step-label">–î–æ—Å—Ç–∞–≤–∫–∞</div>
          </div>
          <div className={`progress-step ${step >= 2 ? 'active' : ''} ${step > 2 ? 'completed' : ''}`}>
            <div className="step-number">2</div>
            <div className="step-label">–û–ø–ª–∞—Ç–∞</div>
          </div>
          <div className={`progress-step ${step >= 3 ? 'active' : ''}`}>
            <div className="step-number">3</div>
            <div className="step-label">–ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è</div>
          </div>
        </div>

        <div className="checkout-content">
          {/* Main Content */}
          <div className="checkout-main">
            {/* Step 1: Delivery Information */}
            {step === 1 && (
              <div className="checkout-step delivery-step">
                <h2 className="step-title">üöö –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –¥–æ—Å—Ç–∞–≤–∫—É</h2>
                
                {/* Personal Info */}
                <div className="form-section">
                  <h3>–û—Å–æ–±–∏—Å—Ç—ñ –¥–∞–Ω—ñ</h3>
                  <div className="form-grid">
                    <div className="form-group">
                      <label htmlFor="firstName">–Ü–º'—è *</label>
                      <input
                        type="text"
                        id="firstName"
                        value={orderData.firstName}
                        onChange={(e) => handleInputChange('firstName', e.target.value)}
                        className={errors.firstName ? 'error' : ''}
                        placeholder="–í–≤–µ–¥—ñ—Ç—å –≤–∞—à–µ —ñ–º'—è"
                      />
                      {errors.firstName && <span className="error-message">{errors.firstName}</span>}
                    </div>
                    
                    <div className="form-group">
                      <label htmlFor="lastName">–ü—Ä—ñ–∑–≤–∏—â–µ *</label>
                      <input
                        type="text"
                        id="lastName"
                        value={orderData.lastName}
                        onChange={(e) => handleInputChange('lastName', e.target.value)}
                        className={errors.lastName ? 'error' : ''}
                        placeholder="–í–≤–µ–¥—ñ—Ç—å –≤–∞—à–µ –ø—Ä—ñ–∑–≤–∏—â–µ"
                      />
                      {errors.lastName && <span className="error-message">{errors.lastName}</span>}
                    </div>
                  </div>
                  
                  <div className="form-grid">
                    <div className="form-group">
                      <label htmlFor="phone">–¢–µ–ª–µ—Ñ–æ–Ω *</label>
                      <input
                        type="tel"
                        id="phone"
                        value={orderData.phone}
                        onChange={(e) => handleInputChange('phone', e.target.value)}
                        className={errors.phone ? 'error' : ''}
                        placeholder="+38 (0__) ___-__-__"
                      />
                      {errors.phone && <span className="error-message">{errors.phone}</span>}
                    </div>
                    
                    <div className="form-group">
                      <label htmlFor="email">Email *</label>
                      <input
                        type="email"
                        id="email"
                        value={orderData.email}
                        onChange={(e) => handleInputChange('email', e.target.value)}
                        className={errors.email ? 'error' : ''}
                        placeholder="your@email.com"
                      />
                      {errors.email && <span className="error-message">{errors.email}</span>}
                    </div>
                  </div>
                </div>

                {/* Delivery Type */}
                <div className="form-section">
                  <h3>–°–ø–æ—Å—ñ–± –¥–æ—Å—Ç–∞–≤–∫–∏</h3>
                  <div className="delivery-options">
                    <label className={`delivery-option ${orderData.deliveryType === 'courier' ? 'selected' : ''}`}>
                      <input
                        type="radio"
                        name="deliveryType"
                        value="courier"
                        checked={orderData.deliveryType === 'courier'}
                        onChange={(e) => handleInputChange('deliveryType', e.target.value)}
                      />
                      <div className="option-content">
                        <div className="option-icon">üöö</div>
                        <div className="option-details">
                          <div className="option-title">–ö—É—Ä'—î—Ä—Å—å–∫–∞ –¥–æ—Å—Ç–∞–≤–∫–∞</div>
                          <div className="option-description">–î–æ—Å—Ç–∞–≤–∫–∞ –ø–æ –∞–¥—Ä–µ—Å—ñ</div>
                          <div className="option-price">
                            {calculateSubtotal() >= 1000 ? '–ë–µ–∑–∫–æ—à—Ç–æ–≤–Ω–æ' : '150 ‚Ç¥'}
                          </div>
                        </div>
                      </div>
                    </label>
                    
                    <label className={`delivery-option ${orderData.deliveryType === 'pickup' ? 'selected' : ''}`}>
                      <input
                        type="radio"
                        name="deliveryType"
                        value="pickup"
                        checked={orderData.deliveryType === 'pickup'}
                        onChange={(e) => handleInputChange('deliveryType', e.target.value)}
                      />
                      <div className="option-content">
                        <div className="option-icon">üè™</div>
                        <div className="option-details">
                          <div className="option-title">–°–∞–º–æ–≤–∏–≤—ñ–∑</div>
                          <div className="option-description">–≤—É–ª. –•—Ä–µ—â–∞—Ç–∏–∫ 22, –ö–∏—ó–≤</div>
                          <div className="option-price">–ë–µ–∑–∫–æ—à—Ç–æ–≤–Ω–æ</div>
                        </div>
                      </div>
                    </label>
                    
                    <label className={`delivery-option ${orderData.deliveryType === 'nova-poshta' ? 'selected' : ''}`}>
                      <input
                        type="radio"
                        name="deliveryType"
                        value="nova-poshta"
                        checked={orderData.deliveryType === 'nova-poshta'}
                        onChange={(e) => handleInputChange('deliveryType', e.target.value)}
                      />
                      <div className="option-content">
                        <div className="option-icon">üì¶</div>
                        <div className="option-details">
                          <div className="option-title">–ù–æ–≤–∞ –ü–æ—à—Ç–∞</div>
                          <div className="option-description">–î–æ –≤—ñ–¥–¥—ñ–ª–µ–Ω–Ω—è –∞–±–æ –ø–æ—à—Ç–æ–º–∞—Ç—É</div>
                          <div className="option-price">–ó–∞ —Ç–∞—Ä–∏—Ñ–∞–º–∏ –ù–ü</div>
                        </div>
                      </div>
                    </label>
                  </div>
                </div>

                {/* Address */}
                {(orderData.deliveryType === 'courier' || orderData.deliveryType === 'nova-poshta') && (
                  <div className="form-section">
                    <h3>–ê–¥—Ä–µ—Å–∞ –¥–æ—Å—Ç–∞–≤–∫–∏</h3>
                    <div className="form-grid">
                      <div className="form-group">
                        <label htmlFor="city">–ú—ñ—Å—Ç–æ</label>
                        <select
                          id="city"
                          value={orderData.city}
                          onChange={(e) => handleInputChange('city', e.target.value)}
                        >
                          {cities.map(city => (
                            <option key={city} value={city}>{city}</option>
                          ))}
                        </select>
                      </div>
                      
                      <div className="form-group">
                        <label htmlFor="address">
                          {orderData.deliveryType === 'courier' ? '–ê–¥—Ä–µ—Å–∞ *' : '–í—ñ–¥–¥—ñ–ª–µ–Ω–Ω—è –ù–æ–≤–æ—ó –ü–æ—à—Ç–∏'}
                        </label>
                        <input
                          type="text"
                          id="address"
                          value={orderData.address}
                          onChange={(e) => handleInputChange('address', e.target.value)}
                          className={errors.address ? 'error' : ''}
                          placeholder={
                            orderData.deliveryType === 'courier' 
                              ? "–≤—É–ª. –ü—Ä–∏–∫–ª–∞–¥–Ω–∞ 123, –∫–≤. 45" 
                              : "–í—ñ–¥–¥—ñ–ª–µ–Ω–Ω—è ‚Ññ1"
                          }
                        />
                        {errors.address && <span className="error-message">{errors.address}</span>}
                      </div>
                    </div>
                  </div>
                )}

                {/* Delivery Time */}
                {orderData.deliveryType === 'courier' && (
                  <div className="form-section">
                    <h3>–ß–∞—Å –¥–æ—Å—Ç–∞–≤–∫–∏</h3>
                    <div className="time-options">
                      <label className={`time-option ${orderData.deliveryTime === 'standard' ? 'selected' : ''}`}>
                        <input
                          type="radio"
                          name="deliveryTime"
                          value="standard"
                          checked={orderData.deliveryTime === 'standard'}
                          onChange={(e) => handleInputChange('deliveryTime', e.target.value)}
                        />
                        <div className="option-content">
                          <div className="option-title">–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞ –¥–æ—Å—Ç–∞–≤–∫–∞</div>
                          <div className="option-description">–ü—Ä–æ—Ç—è–≥–æ–º –¥–Ω—è (9:00-21:00)</div>
                        </div>
                      </label>
                      
                      <label className={`time-option ${orderData.deliveryTime === 'express' ? 'selected' : ''}`}>
                        <input
                          type="radio"
                          name="deliveryTime"
                          value="express"
                          checked={orderData.deliveryTime === 'express'}
                          onChange={(e) => handleInputChange('deliveryTime', e.target.value)}
                        />
                        <div className="option-content">
                          <div className="option-title">–ï–∫—Å–ø—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∞ (+300 ‚Ç¥)</div>
                          <div className="option-description">–ü—Ä–æ—Ç—è–≥–æ–º 2 –≥–æ–¥–∏–Ω</div>
                        </div>
                      </label>
                      
                      <label className={`time-option ${orderData.deliveryTime === 'scheduled' ? 'selected' : ''}`}>
                        <input
                          type="radio"
                          name="deliveryTime"
                          value="scheduled"
                          checked={orderData.deliveryTime === 'scheduled'}
                          onChange={(e) => handleInputChange('deliveryTime', e.target.value)}
                        />
                        <div className="option-content">
                          <div className="option-title">–ó–∞ —Ä–æ–∑–∫–ª–∞–¥–æ–º</div>
                          <div className="option-description">–û–±–µ—Ä—ñ—Ç—å –∑—Ä—É—á–Ω–∏–π —á–∞—Å</div>
                        </div>
                      </label>
                    </div>
                    
                    {orderData.deliveryTime === 'scheduled' && (
                      <div className="scheduled-time">
                        <div className="form-grid">
                          <div className="form-group">
                            <label htmlFor="scheduledDate">–î–∞—Ç–∞ –¥–æ—Å—Ç–∞–≤–∫–∏ *</label>
                            <input
                              type="date"
                              id="scheduledDate"
                              value={orderData.scheduledDate}
                              onChange={(e) => handleInputChange('scheduledDate', e.target.value)}
                              className={errors.scheduledDate ? 'error' : ''}
                              min={new Date().toISOString().split('T')[0]}
                            />
                            {errors.scheduledDate && <span className="error-message">{errors.scheduledDate}</span>}
                          </div>
                          
                          <div className="form-group">
                            <label htmlFor="scheduledTime">–ß–∞—Å –¥–æ—Å—Ç–∞–≤–∫–∏ *</label>
                            <select
                              id="scheduledTime"
                              value={orderData.scheduledTime}
                              onChange={(e) => handleInputChange('scheduledTime', e.target.value)}
                              className={errors.scheduledTime ? 'error' : ''}
                            >
                              <option value="">–û–±–µ—Ä—ñ—Ç—å —á–∞—Å</option>
                              {timeSlots.map(slot => (
                                <option key={slot} value={slot}>{slot}</option>
                              ))}
                            </select>
                            {errors.scheduledTime && <span className="error-message">{errors.scheduledTime}</span>}
                          </div>
                        </div>
                      </div>
                    )}
                  </div>
                )}

                {/* Additional Options */}
                <div className="form-section">
                  <h3>–î–æ–¥–∞—Ç–∫–æ–≤—ñ –æ–ø—Ü—ñ—ó</h3>
                  
                  <div className="form-group">
                    <label className="checkbox-label">
                      <input
                        type="checkbox"
                        checked={orderData.giftWrap}
                        onChange={(e) => handleInputChange('giftWrap', e.target.checked)}
                      />
                      üéÅ –ü–æ–¥–∞—Ä—É–Ω–∫–æ–≤–µ –ø–∞–∫—É–≤–∞–Ω–Ω—è (+50 ‚Ç¥)
                    </label>
                  </div>
                  
                  {orderData.giftWrap && (
                    <div className="form-group">
                      <label htmlFor="giftMessage">–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–∞ –ª–∏—Å—Ç—ñ–≤—Ü—ñ</label>
                      <textarea
                        id="giftMessage"
                        value={orderData.giftMessage}
                        onChange={(e) => handleInputChange('giftMessage', e.target.value)}
                        placeholder="–í–∞—à–µ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è..."
                        rows="3"
                      />
                    </div>
                  )}
                  
                  <div className="form-group">
                    <label htmlFor="comment">–ö–æ–º–µ–Ω—Ç–∞—Ä –¥–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è</label>
                    <textarea
                      id="comment"
                      value={orderData.comment}
                      onChange={(e) => handleInputChange('comment', e.target.value)}
                      placeholder="–î–æ–¥–∞—Ç–∫–æ–≤—ñ –ø–æ–±–∞–∂–∞–Ω–Ω—è –∞–±–æ –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ..."
                      rows="3"
                    />
                  </div>
                </div>

                <div className="step-actions">
                  <button className="next-btn" onClick={handleNextStep}>
                    –î–∞–ª—ñ: –û–ø–ª–∞—Ç–∞ ‚Üí
                  </button>
                </div>
              </div>
            )}

            {/* Step 2: Payment Information */}
            {step === 2 && (
              <div className="checkout-step payment-step">
                <h2 className="step-title">üí≥ –°–ø–æ—Å—ñ–± –æ–ø–ª–∞—Ç–∏</h2>
                
                {/* Payment Methods */}
                <div className="form-section">
                  <h3>–û–±–µ—Ä—ñ—Ç—å —Å–ø–æ—Å—ñ–± –æ–ø–ª–∞—Ç–∏</h3>
                  <div className="payment-options">
                    <label className={`payment-option ${orderData.paymentMethod === 'card' ? 'selected' : ''}`}>
                      <input
                        type="radio"
                        name="paymentMethod"
                        value="card"
                        checked={orderData.paymentMethod === 'card'}
                        onChange={(e) => handleInputChange('paymentMethod', e.target.value)}
                      />
                      <div className="option-content">
                        <div className="option-icon">üí≥</div>
                        <div className="option-details">
                          <div className="option-title">–ë–∞–Ω–∫—ñ–≤—Å—å–∫–∞ –∫–∞—Ä—Ç–∫–∞</div>
                          <div className="option-description">Visa, MasterCard, –ü—Ä–∏–≤–∞—Ç24</div>
                        </div>
                      </div>
                    </label>
                    
                    <label className={`payment-option ${orderData.paymentMethod === 'cash' ? 'selected' : ''}`}>
                      <input
                        type="radio"
                        name="paymentMethod"
                        value="cash"
                        checked={orderData.paymentMethod === 'cash'}
                        onChange={(e) => handleInputChange('paymentMethod', e.target.value)}
                      />
                      <div className="option-content">
                        <div className="option-icon">üíµ</div>
                        <div className="option-details">
                          <div className="option-title">–ì–æ—Ç—ñ–≤–∫–æ—é –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ</div>
                          <div className="option-description">–û–ø–ª–∞—Ç–∞ –∫—É—Ä'—î—Ä—É –∞–±–æ –≤ –º–∞–≥–∞–∑–∏–Ω—ñ</div>
                        </div>
                      </div>
                    </label>
                    
                    <label className={`payment-option ${orderData.paymentMethod === 'online' ? 'selected' : ''}`}>
                      <input
                        type="radio"
                        name="paymentMethod"
                        value="online"
                        checked={orderData.paymentMethod === 'online'}
                        onChange={(e) => handleInputChange('paymentMethod', e.target.value)}
                      />
                      <div className="option-content">
                        <div className="option-icon">üåê</div>
                        <div className="option-details">
                          <div className="option-title">–û–Ω–ª–∞–π–Ω –æ–ø–ª–∞—Ç–∞</div>
                          <div className="option-description">Apple Pay, Google Pay, PayPal</div>
                        </div>
                      </div>
                    </label>
                  </div>
                </div>

                {/* Card Details */}
                {orderData.paymentMethod === 'card' && (
                  <div className="form-section">
                    <h3>–î–∞–Ω—ñ –±–∞–Ω–∫—ñ–≤—Å—å–∫–æ—ó –∫–∞—Ä—Ç–∫–∏</h3>
                    <div className="card-form">
                      <div className="form-group">
                        <label htmlFor="cardNumber">–ù–æ–º–µ—Ä –∫–∞—Ä—Ç–∫–∏ *</label>
                        <input
                          type="text"
                          id="cardNumber"
                          value={orderData.cardNumber}
                          onChange={(e) => handleInputChange('cardNumber', e.target.value)}
                          className={errors.cardNumber ? 'error' : ''}
                          placeholder="1234 5678 9012 3456"
                          maxLength="19"
                        />
                        {errors.cardNumber && <span className="error-message">{errors.cardNumber}</span>}
                      </div>
                      
                      <div className="form-grid">
                        <div className="form-group">
                          <label htmlFor="cardExpiry">–¢–µ—Ä–º—ñ–Ω –¥—ñ—ó *</label>
                          <input
                            type="text"
                            id="cardExpiry"
                            value={orderData.cardExpiry}
                            onChange={(e) => handleInputChange('cardExpiry', e.target.value)}
                            className={errors.cardExpiry ? 'error' : ''}
                            placeholder="MM/YY"
                            maxLength="5"
                          />
                          {errors.cardExpiry && <span className="error-message">{errors.cardExpiry}</span>}
                        </div>
                        
                        <div className="form-group">
                          <label htmlFor="cardCvv">CVV –∫–æ–¥ *</label>
                          <input
                            type="text"
                            id="cardCvv"
                            value={orderData.cardCvv}
                            onChange={(e) => handleInputChange('cardCvv', e.target.value)}
                            className={errors.cardCvv ? 'error' : ''}
                            placeholder="123"
                            maxLength="4"
                          />
                          {errors.cardCvv && <span className="error-message">{errors.cardCvv}</span>}
                        </div>
                      </div>
                      
                      <div className="form-group">
                        <label htmlFor="cardName">–Ü–º'—è –≤–ª–∞—Å–Ω–∏–∫–∞ –∫–∞—Ä—Ç–∫–∏ *</label>
                        <input
                          type="text"
                          id="cardName"
                          value={orderData.cardName}
                          onChange={(e) => handleInputChange('cardName', e.target.value)}
                          className={errors.cardName ? 'error' : ''}
                          placeholder="IVAN PETROV"
                        />
                        {errors.cardName && <span className="error-message">{errors.cardName}</span>}
                      </div>
                    </div>
                  </div>
                )}

                {/* Newsletter Subscription */}
                <div className="form-section">
                  <div className="form-group">
                    <label className="checkbox-label">
                      <input
                        type="checkbox"
                        checked={orderData.newsletter}
                        onChange={(e) => handleInputChange('newsletter', e.target.checked)}
                      />
                      üìß –ü—ñ–¥–ø–∏—Å–∞—Ç–∏—Å—è –Ω–∞ —Ä–æ–∑—Å–∏–ª–∫—É –ø—Ä–æ –Ω–æ–≤–∏–Ω–∫–∏ —Ç–∞ –∞–∫—Ü—ñ—ó
                    </label>
                  </div>
                </div>

                <div className="step-actions">
                  <button className="prev-btn" onClick={handlePrevStep}>
                    ‚Üê –ù–∞–∑–∞–¥
                  </button>
                  <button 
                    className="submit-btn"
                    onClick={handleSubmitOrder}
                    disabled={isLoading}
                  >
                    {isLoading ? '‚è≥ –û–±—Ä–æ–±–∫–∞...' : '‚ú® –û—Ñ–æ—Ä–º–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è'}
                  </button>
                </div>
              </div>
            )}

            {/* Step 3: Order Confirmation */}
            {step === 3 && (
              <div className="checkout-step confirmation-step">
                <div className="confirmation-content">
                  <div className="success-icon">‚úÖ</div>
                  <h2>–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è —É—Å–ø—ñ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–æ!</h2>
                  <p className="order-number">–ù–æ–º–µ—Ä –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è: #BLS{Date.now()}</p>
                  
                  <div className="confirmation-details">
                    <p>–î—è–∫—É—î–º–æ –∑–∞ –≤–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è! –ú–∏ –∑–≤'—è–∂–µ–º–æ—Å—è –∑ –≤–∞–º–∏ –Ω–∞–π–±–ª–∏–∂—á–∏–º —á–∞—Å–æ–º –¥–ª—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è.</p>
                    
                    <div className="next-steps">
                      <h4>–©–æ –¥–∞–ª—ñ?</h4>
                      <ul>
                        <li>üìß –í–∏ –æ—Ç—Ä–∏–º–∞—î—Ç–µ email-–ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è</li>
                        <li>üìû –ù–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä –∑–≤'—è–∂–µ—Ç—å—Å—è –∑ –≤–∞–º–∏ –ø—Ä–æ—Ç—è–≥–æ–º 30 —Ö–≤–∏–ª–∏–Ω</li>
                        <li>üå∏ –í–∞—à—ñ –∫–≤—ñ—Ç–∏ –±—É–¥—É—Ç—å —Å–≤—ñ–∂–∏–º–∏ —Ç–∞ –∫—Ä–∞—Å–∏–≤–∏–º–∏</li>
                        <li>üöö –î–æ—Å—Ç–∞–≤–∏–º–æ —Ç–æ—á–Ω–æ –≤ –∑–∞–∑–Ω–∞—á–µ–Ω–∏–π —á–∞—Å</li>
                      </ul>
                    </div>
                  </div>
                  
                  <div className="confirmation-actions">
                    <button 
                      className="home-btn"
                      onClick={() => navigate('/')}
                    >
                      üè† –ù–∞ –≥–æ–ª–æ–≤–Ω—É
                    </button>
                    <button 
                      className="catalog-btn"
                      onClick={() => navigate('/catalog')}
                    >
                      üå∫ –ü—Ä–æ–¥–æ–≤–∂–∏—Ç–∏ –ø–æ–∫—É–ø–∫–∏
                    </button>
                  </div>
                </div>
              </div>
            )}
          </div>

          {/* Order Summary Sidebar */}
          {step < 3 && (
            <div className="checkout-sidebar">
              <div className="order-summary">
                <h3 className="summary-title">–í–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è</h3>
                
                {/* Items */}
                <div className="summary-items">
                  {cartItems.map(item => (
                    <div key={`${item.id}-${item.selectedSize || 'default'}`} className="summary-item">
                      <div className="item-image">
                        <img src={item.images ? item.images[0] : item.image} alt={item.name} />
                      </div>
                      <div className="item-details">
                        <div className="item-name">{item.name}</div>
                        {item.selectedSize && (
                          <div className="item-size">–†–æ–∑–º—ñ—Ä: {item.selectedSize}</div>
                        )}
                        <div className="item-quantity">–ö—ñ–ª—å–∫—ñ—Å—Ç—å: {item.quantity}</div>
                      </div>
                      <div className="item-price">
                        {(item.price * item.quantity).toFixed(0)} ‚Ç¥
                      </div>
                    </div>
                  ))}
                </div>

                {/* Promo Code */}
                <div className="promo-section">
                  <div className="promo-input-group">
                    <input
                      type="text"
                      placeholder="–ü—Ä–æ–º–æ–∫–æ–¥"
                      value={promoCode}
                      onChange={(e) => setPromoCode(e.target.value.toUpperCase())}
                      className="promo-input"
                    />
                    <button className="promo-btn" onClick={handlePromoCode}>
                      ‚ú®
                    </button>
                  </div>
                  {discount > 0 && (
                    <div className="promo-applied">
                      üéâ –ó–Ω–∏–∂–∫–∞ {discount}% –∑–∞—Å—Ç–æ—Å–æ–≤–∞–Ω–∞!
                    </div>
                  )}
                </div>

                {/* Totals */}
                <div className="summary-totals">
                  <div className="total-row">
                    <span>–¢–æ–≤–∞—Ä—ñ–≤ ({cartItems.length}):</span>
                    <span>{calculateSubtotal().toFixed(0)} ‚Ç¥</span>
                  </div>
                  
                  <div className="total-row">
                    <span>–î–æ—Å—Ç–∞–≤–∫–∞:</span>
                    <span>
                      {calculateDeliveryPrice() === 0 ? '–ë–µ–∑–∫–æ—à—Ç–æ–≤–Ω–æ' : `${calculateDeliveryPrice()} ‚Ç¥`}
                    </span>
                  </div>
                  
                  {orderData.giftWrap && (
                    <div className="total-row">
                      <span>–ü–æ–¥–∞—Ä—É–Ω–∫–æ–≤–µ –ø–∞–∫—É–≤–∞–Ω–Ω—è:</span>
                      <span>50 ‚Ç¥</span>
                    </div>
                  )}
                  
                  {discount > 0 && (
                    <div className="total-row discount">
                      <span>–ó–Ω–∏–∂–∫–∞ ({discount}%):</span>
                      <span>-{calculateDiscount().toFixed(0)} ‚Ç¥</span>
                    </div>
                  )}
                  
                  <div className="total-row final">
                    <span>–î–æ —Å–ø–ª–∞—Ç–∏:</span>
                    <span>
                      {(calculateTotal() + (orderData.giftWrap ? 50 : 0)).toFixed(0)} ‚Ç¥
                    </span>
                  </div>
                </div>

                {/* Security */}
                <div className="security-badges">
                  <div className="security-badge">
                    <span className="badge-icon">üîí</span>
                    <span>–ë–µ–∑–ø–µ—á–Ω–∞ –æ–ø–ª–∞—Ç–∞</span>
                  </div>
                  <div className="security-badge">
                    <span className="badge-icon">‚úÖ</span>
                    <span>–ì–∞—Ä–∞–Ω—Ç—ñ—è —è–∫–æ—Å—Ç—ñ</span>
                  </div>
                </div>
              </div>
            </div>
          )}
        </div>
      </div>
    </div>
  );
};

export default Checkout;