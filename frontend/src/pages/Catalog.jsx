import React, { useState, useEffect } from 'react';
import ProductCard from '../components/ProductCard';
import '../styles/pages/Catalog.css';

const Catalog = ({ onAddToCart }) => {
  const [products, setProducts] = useState([]);
  const [isLoading, setIsLoading] = useState(true);
  const [filters, setFilters] = useState({
    category: 'all',
    priceRange: 'all',
    sortBy: 'featured'
  });
  const [searchQuery, setSearchQuery] = useState('');

  // –ü—Ä–µ–º–∏–∞–ª—å–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
  const categories = [
    { id: 'all', name: '–í—Å—ñ –∫–æ–ª–µ–∫—Ü—ñ—ó', icon: 'üåü' },
    { id: 'premium', name: '–ü—Ä–µ–º—ñ—É–º', icon: 'üëë' },
    { id: 'luxury', name: '–õ—é–∫—Å', icon: 'üíé' },
    { id: 'seasonal', name: '–°–µ–∑–æ–Ω–Ω—ñ', icon: 'üå∏' },
    { id: 'custom', name: '–ù–∞ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è', icon: 'üé®' }
  ];

  const priceRanges = [
    { id: 'all', name: '–í—Å—ñ —Ü—ñ–Ω–∏', min: 0, max: Infinity },
    { id: 'budget', name: '–î–æ 2000 ‚Ç¥', min: 0, max: 2000 },
    { id: 'medium', name: '2000 - 5000 ‚Ç¥', min: 2000, max: 5000 },
    { id: 'premium', name: '5000 - 10000 ‚Ç¥', min: 5000, max: 10000 },
    { id: 'luxury', name: '–í—ñ–¥ 10000 ‚Ç¥', min: 10000, max: Infinity }
  ];

  const sortOptions = [
    { id: 'featured', name: '–†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω—ñ' },
    { id: 'price-asc', name: '–¶—ñ–Ω–∞: –∑–∞ –∑—Ä–æ—Å—Ç–∞–Ω–Ω—è–º' },
    { id: 'price-desc', name: '–¶—ñ–Ω–∞: –∑–∞ —Å–ø–∞–¥–∞–Ω–Ω—è–º' },
    { id: 'name', name: '–ó–∞ –Ω–∞–∑–≤–æ—é' },
    { id: 'rating', name: '–ó–∞ —Ä–µ–π—Ç–∏–Ω–≥–æ–º' }
  ];

  // –ú–æ–∫ –¥–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä–æ–≤
  const getAllProducts = async () => {
    await new Promise(resolve => setTimeout(resolve, 800));
    
    return [
      {
        id: '1',
        name: 'Midnight Embrace Luxury Box',
        category: 'premium',
        shortDescription: '–ü—Ä–µ–º—ñ–∞–ª—å–Ω–∏–π –±–æ–∫—Å –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –º—ñ—Å—Ç–∏—á–Ω–æ—ó –∞—Ç–º–æ—Å—Ñ–µ—Ä–∏',
        price: 4299,
        oldPrice: 4999,
        images: ['https://via.placeholder.com/400x400/2a2a2a/d4af37?text=üå∏'],
        rating: 4.9,
        reviewsCount: 127,
        inStock: true,
        badge: { type: 'premium', text: 'Limited Edition' },
        luxury: true
      },
      {
        id: '2',
        name: 'Golden Dreams Couture',
        category: 'luxury',
        shortDescription: '–ó–æ–ª–æ—Ç–∏–π –ø—Ä–µ–º—ñ—É–º –±–æ–∫—Å –∑ –±—ñ–ª–∏–º–∏ –æ—Ä—Ö—ñ–¥–µ—è–º–∏',
        price: 5299,
        images: ['https://via.placeholder.com/400x400/d4af37/000?text=‚ú®'],
        rating: 5.0,
        reviewsCount: 89,
        inStock: true,
        badge: { type: 'exclusive', text: 'Haute Couture' },
        luxury: true
      },
      {
        id: '3',
        name: 'Spring Symphony Deluxe',
        category: 'seasonal',
        shortDescription: '–í–µ—Å–Ω—è–Ω–∞ –∫–æ–ª–µ–∫—Ü—ñ—è –∑ —Ä—ñ–¥–∫—ñ—Å–Ω–∏–º–∏ —Ç—é–ª—å–ø–∞–Ω–∞–º–∏',
        price: 2999,
        oldPrice: 3499,
        images: ['https://via.placeholder.com/400x400/90EE90/000?text=üå∑'],
        rating: 4.8,
        reviewsCount: 203,
        inStock: true,
        badge: { type: 'seasonal', text: 'Seasonal Drop' },
        luxury: false
      },
      {
        id: '4',
        name: 'Royal Roses Platinum',
        category: 'luxury',
        shortDescription: '–ö–æ—Ä–æ–ª—ñ–≤—Å—å–∫—ñ —Ç—Ä–æ—è–Ω–¥–∏ –≤ –ø–ª–∞—Ç–∏–Ω–æ–≤–æ–º—É –±–æ–∫—Å—ñ',
        price: 6799,
        images: ['https://via.placeholder.com/400x400/8B0000/FFD700?text=üåπ'],
        rating: 4.9,
        reviewsCount: 156,
        inStock: true,
        badge: { type: 'platinum', text: 'Platinum Series' },
        luxury: true
      },
      {
        id: '5',
        name: 'Crystal Garden Premium',
        category: 'premium',
        shortDescription: '–ö—Ä–∏—à—Ç–∞–ª–µ–≤–∏–π —Å–∞–¥ –∑ —Ä—ñ–¥–∫—ñ—Å–Ω–∏–º–∏ –∫–≤—ñ—Ç–∞–º–∏',
        price: 3799,
        images: ['https://via.placeholder.com/400x400/E6E6FA/000?text=üíé'],
        rating: 4.7,
        reviewsCount: 94,
        inStock: true,
        badge: { type: 'new', text: 'New Arrival' },
        luxury: false
      },
      {
        id: '6',
        name: 'Velvet Dreams Collection',
        category: 'custom',
        shortDescription: '–û–∫—Å–∞–º–∏—Ç–æ–≤–∞ –∫–æ–ª–µ–∫—Ü—ñ—è –Ω–∞ —ñ–Ω–¥–∏–≤—ñ–¥—É–∞–ª—å–Ω–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è',
        price: 8499,
        images: ['https://via.placeholder.com/400x400/800080/FFD700?text=üå∫'],
        rating: 4.9,
        reviewsCount: 67,
        inStock: true,
        badge: { type: 'custom', text: 'Made to Order' },
        luxury: true
      }
    ];
  };

  useEffect(() => {
    const loadProducts = async () => {
      try {
        const allProducts = await getAllProducts();
        setProducts(allProducts);
      } catch (error) {
        console.error('–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ç–æ–≤–∞—Ä—ñ–≤:', error);
      } finally {
        setIsLoading(false);
      }
    };
    
    loadProducts();
  }, []);

  // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Ç–æ–≤–∞—Ä–æ–≤
  const filteredProducts = products.filter(product => {
    // –§–∏–ª—å—Ç—Ä –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    if (filters.category !== 'all' && product.category !== filters.category) {
      return false;
    }

    // –§–∏–ª—å—Ç—Ä –ø–æ —Ü–µ–Ω–µ
    const priceRange = priceRanges.find(range => range.id === filters.priceRange);
    if (priceRange && (product.price < priceRange.min || product.price > priceRange.max)) {
      return false;
    }

    // –ü–æ–∏—Å–∫
    if (searchQuery && !product.name.toLowerCase().includes(searchQuery.toLowerCase())) {
      return false;
    }

    return true;
  });

  // –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤
  const sortedProducts = [...filteredProducts].sort((a, b) => {
    switch (filters.sortBy) {
      case 'price-asc':
        return a.price - b.price;
      case 'price-desc':
        return b.price - a.price;
      case 'name':
        return a.name.localeCompare(b.name);
      case 'rating':
        return b.rating - a.rating;
      default:
        return 0;
    }
  });

  const handleFilterChange = (filterType, value) => {
    setFilters(prev => ({
      ...prev,
      [filterType]: value
    }));
  };

  const clearFilters = () => {
    setFilters({
      category: 'all',
      priceRange: 'all',
      sortBy: 'featured'
    });
    setSearchQuery('');
  };

  return (
    <div className="catalog-page">
      {/* –ü—Ä–µ–º–∏–∞–ª—å–Ω—ã–π —Ö–µ–¥–µ—Ä –∫–∞—Ç–∞–ª–æ–≥–∞ */}
      <section className="catalog-hero">
        <div className="floating-elements">
          <div className="floating-flower">üå∏</div>
          <div className="floating-star">‚ú®</div>
          <div className="floating-diamond">üíé</div>
        </div>
        
        <div className="container">
          <div className="catalog-hero-content">
            <div className="luxury-badge">
              <span className="badge-icon">üëë</span>
              EXCLUSIVE COLLECTIONS
            </div>
            <h1 className="catalog-title">–ö–∞—Ç–∞–ª–æ–≥ –ø—Ä–µ–º—ñ–∞–ª—å–Ω–∏—Ö –∫–≤—ñ—Ç—ñ–≤</h1>
            <p className="catalog-subtitle">
              –í—ñ–¥–∫—Ä–∏–π—Ç–µ —Å–≤—ñ—Ç —Ä–æ–∑–∫–æ—à—ñ —Ç–∞ –≤–∏—Ç–æ–Ω—á–µ–Ω–æ—Å—Ç—ñ —É –Ω–∞—à—ñ–π –µ–∫—Å–∫–ª—é–∑–∏–≤–Ω—ñ–π –∫–æ–ª–µ–∫—Ü—ñ—ó
            </p>
            
            {/* –ü—Ä–µ–º–∏–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ */}
            <div className="catalog-stats">
              <div className="stat-item">
                <span className="stat-number">{products.length}+</span>
                <span className="stat-label">–ï–∫—Å–∫–ª—é–∑–∏–≤–Ω–∏—Ö —Ç–æ–≤–∞—Ä—ñ–≤</span>
              </div>
              <div className="stat-item">
                <span className="stat-number">4.9</span>
                <span className="stat-label">–°–µ—Ä–µ–¥–Ω—ñ–π —Ä–µ–π—Ç–∏–Ω–≥</span>
              </div>
              <div className="stat-item">
                <span className="stat-number">24/7</span>
                <span className="stat-label">–ü—Ä–µ–º—ñ—É–º –ø—ñ–¥—Ç—Ä–∏–º–∫–∞</span>
              </div>
            </div>
          </div>
        </div>
      </section>

      {/* –§–∏–ª—å—Ç—Ä—ã –∏ –ø–æ–∏—Å–∫ */}
      <section className="catalog-filters">
        <div className="container">
          <div className="filters-container">
            {/* –ü–æ–∏—Å–∫ */}
            <div className="search-section">
              <div className="luxury-search">
                <span className="search-icon">üîç</span>
                <input
                  type="text"
                  placeholder="–ü–æ—à—É–∫ –ø—Ä–µ–º—ñ–∞–ª—å–Ω–∏—Ö –∫–≤—ñ—Ç—ñ–≤..."
                  value={searchQuery}
                  onChange={(e) => setSearchQuery(e.target.value)}
                  className="search-input"
                />
                <button className="search-btn luxury-button">
                  –ó–Ω–∞–π—Ç–∏
                </button>
              </div>
            </div>

            {/* –§–∏–ª—å—Ç—Ä—ã */}
            <div className="filters-section">
              {/* –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ */}
              <div className="filter-group">
                <h3 className="filter-title">
                  <span className="filter-icon">üéØ</span>
                  –ö–∞—Ç–µ–≥–æ—Ä—ñ—ó
                </h3>
                <div className="filter-options category-filters">
                  {categories.map(category => (
                    <button
                      key={category.id}
                      className={`filter-btn ${filters.category === category.id ? 'active' : ''}`}
                      onClick={() => handleFilterChange('category', category.id)}
                    >
                      <span className="filter-emoji">{category.icon}</span>
                      {category.name}
                    </button>
                  ))}
                </div>
              </div>

              {/* –¶–µ–Ω–æ–≤—ã–µ –¥–∏–∞–ø–∞–∑–æ–Ω—ã */}
              <div className="filter-group">
                <h3 className="filter-title">
                  <span className="filter-icon">üí∞</span>
                  –¶—ñ–Ω–æ–≤–∏–π –¥—ñ–∞–ø–∞–∑–æ–Ω
                </h3>
                <div className="filter-options price-filters">
                  {priceRanges.map(range => (
                    <button
                      key={range.id}
                      className={`filter-btn ${filters.priceRange === range.id ? 'active' : ''}`}
                      onClick={() => handleFilterChange('priceRange', range.id)}
                    >
                      {range.name}
                    </button>
                  ))}
                </div>
              </div>

              {/* –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ */}
              <div className="filter-group">
                <h3 className="filter-title">
                  <span className="filter-icon">üìä</span>
                  –°–æ—Ä—Ç—É–≤–∞–Ω–Ω—è
                </h3>
                <div className="filter-options sort-options">
                  <select
                    value={filters.sortBy}
                    onChange={(e) => handleFilterChange('sortBy', e.target.value)}
                    className="sort-select luxury-select"
                  >
                    {sortOptions.map(option => (
                      <option key={option.id} value={option.id}>
                        {option.name}
                      </option>
                    ))}
                  </select>
                </div>
              </div>

              {/* –û—á–∏—Å—Ç–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã */}
              <button className="clear-filters-btn" onClick={clearFilters}>
                <span>üóëÔ∏è</span>
                –û—á–∏—Å—Ç–∏—Ç–∏ —Ñ—ñ–ª—å—Ç—Ä–∏
              </button>
            </div>
          </div>
        </div>
      </section>

      {/* –†–µ–∑—É–ª—å—Ç–∞—Ç—ã */}
      <section className="catalog-results">
        <div className="container">
          <div className="results-header">
            <h2 className="results-title">
              {searchQuery ? `–†–µ–∑—É–ª—å—Ç–∞—Ç–∏ –ø–æ—à—É–∫—É: "${searchQuery}"` : '–ù–∞—à—ñ –∫–æ–ª–µ–∫—Ü—ñ—ó'}
            </h2>
            <div className="results-count">
              –ó–Ω–∞–π–¥–µ–Ω–æ <span className="count-number">{sortedProducts.length}</span> —Ç–æ–≤–∞—Ä—ñ–≤
            </div>
          </div>

          {isLoading ? (
            <div className="loading-grid luxury-loading">
              {[...Array(6)].map((_, index) => (
                <div key={index} className="loading-card luxury-loading-card">
                  <div className="loading-image luxury-loading-image"></div>
                  <div className="loading-content">
                    <div className="loading-line luxury-loading-line"></div>
                    <div className="loading-line luxury-loading-line short"></div>
                    <div className="loading-line luxury-loading-line"></div>
                  </div>
                </div>
              ))}
            </div>
          ) : sortedProducts.length > 0 ? (
            <div className="products-grid luxury-products-grid">
              {sortedProducts.map(product => (
                <ProductCard
                  key={product.id}
                  product={product}
                  onAddToCart={onAddToCart}
                  luxury={product.luxury}
                />
              ))}
            </div>
          ) : (
            <div className="no-results">
              <div className="no-results-icon">üå∏</div>
              <h3>–¢–æ–≤–∞—Ä–∏ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω—ñ</h3>
              <p>–°–ø—Ä–æ–±—É–π—Ç–µ –∑–º—ñ–Ω–∏—Ç–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ –ø–æ—à—É–∫—É –∞–±–æ —Ñ—ñ–ª—å—Ç—Ä–∏</p>
              <button className="luxury-button" onClick={clearFilters}>
                –ü–æ–∫–∞–∑–∞—Ç–∏ –≤—Å—ñ —Ç–æ–≤–∞—Ä–∏
              </button>
            </div>
          )}
        </div>
      </section>
    </div>
  );
};

export default Catalog;