const API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000/api';

class ApiService {
  constructor() {
    this.baseURL = API_BASE_URL;
  }

  // –ë–∞–∑–æ–≤—ã–π –º–µ—Ç–æ–¥ –¥–ª—è HTTP –∑–∞–ø—Ä–æ—Å–æ–≤
  async request(endpoint, options = {}) {
    const url = `${this.baseURL}${endpoint}`;
    
    const config = {
      headers: {
        'Content-Type': 'application/json',
        ...options.headers,
      },
      ...options,
    };

    try {
      const response = await fetch(url, config);
      
      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }
      
      const data = await response.json();
      return data;
    } catch (error) {
      console.error(`API –∑–∞–ø—Ä–æ—Å –Ω–µ—É–¥–∞—á–µ–Ω: ${url}`, error);
      throw error;
    }
  }

  // ========== PRODUCTS API ==========

  // –ü–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –±–æ–∫—Å—ã –¥–ª—è –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
  async getFeaturedProducts() {
    try {
      console.log('üåü –ó–∞–ø—Ä–æ—Å —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã—Ö –±–æ–∫—Å–æ–≤...');
      const response = await this.request('/products/featured');
      
      if (response.success) {
        console.log(`‚úÖ –ü–æ–ª—É—á–µ–Ω–æ ${response.count} —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã—Ö –±–æ–∫—Å–æ–≤`);
        return response.products;
      } else {
        throw new Error(response.message || '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã—Ö –±–æ–∫—Å–æ–≤');
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è featured products:', error);
      return [];
    }
  }

  // –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –±–æ–∫—Å—ã —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π
  async getAllProducts(filters = {}) {
    try {
      const queryParams = new URLSearchParams();
      
      Object.keys(filters).forEach(key => {
        if (filters[key] !== undefined && filters[key] !== null) {
          queryParams.append(key, filters[key]);
        }
      });

      const endpoint = `/products${queryParams.toString() ? `?${queryParams.toString()}` : ''}`;
      const response = await this.request(endpoint);
      
      if (response.success) {
        return {
          products: response.products,
          pagination: response.pagination
        };
      } else {
        throw new Error(response.message || '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤');
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö —Ç–æ–≤–∞—Ä–æ–≤:', error);
      return { products: [], pagination: null };
    }
  }

  // –ü–æ–ª—É—á–∏—Ç—å –±–æ–∫—Å –ø–æ ID
  async getProductById(id) {
    try {
      const response = await this.request(`/products/${id}`);
      
      if (response.success) {
        return response.product;
      } else {
        throw new Error(response.message || '–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω');
      }
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ ${id}:`, error);
      return null;
    }
  }

  // –ü–æ–∏—Å–∫ –±–æ–∫—Å–æ–≤
  async searchProducts(searchTerm) {
    try {
      if (!searchTerm || searchTerm.trim().length < 2) {
        return [];
      }

      const response = await this.request(`/products/search?q=${encodeURIComponent(searchTerm)}`);
      
      if (response.success) {
        return response.products;
      } else {
        throw new Error(response.message || '–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞');
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤:', error);
      return [];
    }
  }

  // –ü–æ–ª—É—á–∏—Ç—å –ø–æ—Ö–æ–∂–∏–µ –±–æ–∫—Å—ã
  async getSimilarProducts(productId, limit = 4) {
    try {
      const response = await this.request(`/products/${productId}/similar?limit=${limit}`);
      
      if (response.success) {
        return response.products;
      } else {
        throw new Error(response.message || '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ—Ö–æ–∂–∏—Ö —Ç–æ–≤–∞—Ä–æ–≤');
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ—Ö–æ–∂–∏—Ö —Ç–æ–≤–∞—Ä–æ–≤:', error);
      return [];
    }
  }

  // –ü–æ–ª—É—á–∏—Ç—å –±–æ–∫—Å—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
  async getProductsByCategory(category, limit = 12) {
    try {
      const response = await this.request(`/products/category/${category}?limit=${limit}`);
      
      if (response.success) {
        return response.products;
      } else {
        throw new Error(response.message || '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏');
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:', error);
      return [];
    }
  }

  // –û–±–Ω–æ–≤–∏—Ç—å —Ä–µ–π—Ç–∏–Ω–≥ –±–æ–∫—Å–∞
  async updateProductRating(productId, rating) {
    try {
      const response = await this.request(`/products/${productId}/rating`, {
        method: 'POST',
        body: JSON.stringify({ rating })
      });
      
      if (response.success) {
        return response.rating;
      } else {
        throw new Error(response.message || '–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–µ–π—Ç–∏–Ω–≥–∞');
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–µ–π—Ç–∏–Ω–≥–∞:', error);
      throw error;
    }
  }

  // ========== HEALTH CHECK ==========
  async checkHealth() {
    try {
      const response = await fetch(`${this.baseURL.replace('/api', '')}/health`);
      return await response.json();
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è API:', error);
      return { status: 'ERROR' };
    }
  }

  // ========== UTILITIES ==========

  // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å API
  async isApiAvailable() {
    try {
      const health = await this.checkHealth();
      return health.status === 'OK';
    } catch (error) {
      return false;
    }
  }

  // –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
  async getStats() {
    try {
      const response = await this.request('/products/stats');
      
      if (response.success) {
        return response.stats;
      } else {
        throw new Error(response.message || '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏');
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
      return null;
    }
  }
}

// –°–æ–∑–¥–∞–µ–º –∏ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä
const apiService = new ApiService();

export default apiService;

// –≠–∫—Å–ø–æ—Ä—Ç –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤ –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
export const {
  getFeaturedProducts,
  getAllProducts,
  getProductById,
  searchProducts,
  getSimilarProducts,
  getProductsByCategory,
  updateProductRating,
  checkHealth,
  isApiAvailable,
  getStats
} = apiService;